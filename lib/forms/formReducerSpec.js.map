{"version":3,"sources":["../../src/forms/formReducerSpec.js"],"names":["CONST","describe","FORM_NAME","prevState","beforeEach","Forms","Giftcard","errors","it","state","expect","toBeEmptyObject","oldMember","type","toHaveMember","PIN_VALUE","FORM_INITIAL_DATA","formName","values","toBeNonEmptyObject","toBe","ERROR_VALUE","FORM_DATA_REPLACE","FORM_DATA_MERGE","NUMBER_VALUE","toBeDefined","FORM_INPUT_CHANGE","formInput","oldState","not","dummyProp","FORM_VALIDATE","toBeArrayOfStrings","toBeEmptyString","FORM_SINGLE_VALIDATE","FORM_RESET","FORM_TRIGGER_VALIDATION","trigger","isTriggerValidation"],"mappings":"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","file":"formReducerSpec.js","sourcesContent":["import forms from './formReducer';\nimport * as CONST from './formConstants';\n\ndescribe('Form Reducer', () => {\n  const FORM_NAME = 'Giftcard';\n  let prevState;\n\n  beforeEach(() => {\n    prevState = {\n      Forms: {\n        Giftcard: {\n          errors: {\n            'gx-pin': ['I am an error message']\n          }\n        }\n      }\n    };\n  });\n\n  describe('WHEN state does not exist', () => {\n    it('SHOULD return an empty object', () => {\n      const state = forms();\n      expect(state).toBeEmptyObject();\n    });\n  });\n\n  describe('WHEN action type does not exist', () => {\n    it('SHOULD return the last know state', () => {\n      const state = forms({\n        oldMember: 1\n      }, {\n        type: 'NON_EXISTENT'\n      });\n      expect(state).toHaveMember('oldMember');\n    });\n  });\n\n  describe('FORM_INITIAL_DATA', () => {\n    describe('WHEN initial values AND/OR errors are given', () => {\n      it('SHOULD return the given values as part of the state', () => {\n        const PIN_VALUE = '1234';\n        const state = forms({}, {\n          type: CONST.FORM_INITIAL_DATA,\n          formName: FORM_NAME,\n          values: {\n            'gx-pin': PIN_VALUE\n          }\n        });\n        expect(state[FORM_NAME].values).toBeNonEmptyObject();\n        expect(state[FORM_NAME].values['gx-pin']).toBe(PIN_VALUE);\n      });\n\n      it('SHOULD return the given errors as part of the state', () => {\n        const ERROR_VALUE = 'this is an error';\n        const state = forms({}, {\n          type: CONST.FORM_INITIAL_DATA,\n          formName: FORM_NAME,\n          errors: {\n            'gx-pin': [ERROR_VALUE]\n          }\n        });\n        expect(state[FORM_NAME].errors).toBeNonEmptyObject();\n        expect(state[FORM_NAME].errors['gx-pin'][0]).toBe(ERROR_VALUE);\n      });\n    });\n  });\n\n  describe('FORM_DATA_REPLACE', () => {\n    describe('WHEN values AND/OR errors are given', () => {\n      it('SHOULD return the given values as part of the state', () => {\n        const PIN_VALUE = '1234';\n        const state = forms({}, {\n          type: CONST.FORM_DATA_REPLACE,\n          formName: FORM_NAME,\n          values: {\n            'gx-pin': PIN_VALUE\n          }\n        });\n        expect(state[FORM_NAME].values).toBeNonEmptyObject();\n        expect(state[FORM_NAME].values['gx-pin']).toBe(PIN_VALUE);\n      });\n\n      it('SHOULD return the given errors as part of the state', () => {\n        const ERROR_VALUE = 'this is an error';\n        const state = forms({}, {\n          type: CONST.FORM_DATA_REPLACE,\n          formName: FORM_NAME,\n          errors: {\n            'gx-pin': [ERROR_VALUE]\n          }\n        });\n        expect(state[FORM_NAME].errors).toBeNonEmptyObject();\n        expect(state[FORM_NAME].errors['gx-pin'][0]).toBe(ERROR_VALUE);\n      });\n    });\n  });\n\n  describe('FORM_DATA_MERGE', () => {\n    describe('WHEN values AND/OR errors are given', () => {\n      it('SHOULD return the given values as part of the state', () => {\n        const PIN_VALUE = '1234';\n        const state = forms({}, {\n          type: CONST.FORM_DATA_MERGE,\n          formName: FORM_NAME,\n          values: {\n            'gx-pin': PIN_VALUE\n          }\n        });\n        expect(state[FORM_NAME].values).toBeNonEmptyObject();\n        expect(state[FORM_NAME].values['gx-pin']).toBe(PIN_VALUE);\n      });\n\n      it('SHOULD return the given errors as part of the state', () => {\n        const ERROR_VALUE = 'this is an error';\n        const state = forms({}, {\n          type: CONST.FORM_DATA_MERGE,\n          formName: FORM_NAME,\n          errors: {\n            'gx-pin': [ERROR_VALUE]\n          }\n        });\n        expect(state[FORM_NAME].errors).toBeNonEmptyObject();\n        expect(state[FORM_NAME].errors['gx-pin'][0]).toBe(ERROR_VALUE);\n      });\n\n      it('SHOULD return existing values + new values as part of the state', () => {\n        const PIN_VALUE = '1234';\n        const NUMBER_VALUE = 'A00001';\n        const state = forms({\n          [FORM_NAME]: {\n            values: {\n              'gx-number': 'A00001'\n            }\n          }\n        }, {\n          type: CONST.FORM_DATA_MERGE,\n          formName: FORM_NAME,\n          values: {\n            'gx-pin': PIN_VALUE\n          }\n        });\n        expect(state[FORM_NAME].values).toBeNonEmptyObject();\n        expect(state[FORM_NAME].values['gx-pin']).toBe(PIN_VALUE);\n        expect(state[FORM_NAME].values['gx-number']).toBe(NUMBER_VALUE);\n      });\n\n      it('SHOULD return remove all errors WHEN errors are existing', () => {\n        const PIN_VALUE = '1234';\n        const state = forms({\n          [FORM_NAME]: {\n            errors: {\n              'gx-number': ['this is an error']\n            }\n          }\n        }, {\n          type: CONST.FORM_DATA_MERGE,\n          formName: FORM_NAME,\n          values: {\n            'gx-pin': PIN_VALUE\n          }\n        });\n        expect(state[FORM_NAME].errors).toBeDefined();\n      });\n    });\n  });\n\n  describe('FORM_INPUT_CHANGE', () => {\n    describe('WHEN an input value is given', () => {\n      it('SHOULD return the given input field value as part of the state', () => {\n        const state = forms({}, {\n          type: CONST.FORM_INPUT_CHANGE,\n          formName: FORM_NAME,\n          formInput: {\n            'gx-pin': '1234'\n          }\n        });\n        expect(state[FORM_NAME].values).toBeNonEmptyObject();\n      });\n\n      it('SHOULD return the state of sibling inputs, IF there are any', () => {\n        const state = forms({\n          [FORM_NAME]: {\n            values: {\n              'gx-number': '007'\n            }\n          }\n        }, {\n          type: CONST.FORM_INPUT_CHANGE,\n          formName: FORM_NAME,\n          formInput: {\n            'gx-pin': '1234'\n          }\n        });\n        expect(state[FORM_NAME].values).toBeNonEmptyObject();\n      });\n\n      it('SHOULD always return a new state', () => {\n        const oldState = {\n          [FORM_NAME]: {\n            values: {\n              'gx-pin': '1234'\n            }\n          }\n        };\n        const state = forms(oldState, {\n          type: CONST.FORM_INPUT_CHANGE,\n          formName: FORM_NAME,\n          formInput: {\n            'gx-pin': '1234'\n          }\n        });\n        expect(state).not.toBe(oldState);\n        expect(state[FORM_NAME].values['gx-pin']).toBe(oldState[FORM_NAME].values['gx-pin']);\n      });\n\n      it('SHOULD always return all other state members (like form errors)', () => {\n        const oldState = {\n          dummyProp: 1,\n          [FORM_NAME]: {\n            values: {\n              'gx-pin': '1234'\n            },\n            errors: {\n              'gx-pin': ['error message']\n            }\n          }\n        };\n        const state = forms(oldState, {\n          type: CONST.FORM_INPUT_CHANGE,\n          formName: FORM_NAME,\n          formInput: {\n            'gx-pin': '1234'\n          }\n        });\n\n        expect(state).toHaveMember('dummyProp');\n      });\n    });\n  });\n\n  describe('FORM_VALIDATE', () => {\n    describe('WHEN error messages are present', () => {\n      it('SHOULD return error message', () => {\n        const state = forms({}, {\n          type: CONST.FORM_VALIDATE,\n          formName: FORM_NAME,\n          errors: {\n            'gx-pin': ['error']\n          }\n        });\n        expect(state[FORM_NAME]).toBeNonEmptyObject();\n        expect(state.Giftcard.errors['gx-pin']).toBeArrayOfStrings();\n      });\n\n      it('SHOULD be able to return multiple error messages', () => {\n        const state = forms(prevState, {\n          type: CONST.FORM_VALIDATE,\n          formName: FORM_NAME,\n          errors: {\n            'gx-number': ['error'],\n            'gx-pin': ['error']\n          }\n        });\n        expect(state).toBeNonEmptyObject();\n        expect(state[FORM_NAME].errors).toHaveMember('gx-number');\n        expect(state[FORM_NAME].errors).toHaveMember('gx-pin');\n      });\n\n      it('SHOULD remove error messages WHEN no error is present', () => {\n        const state = forms(prevState, {\n          type: CONST.FORM_VALIDATE,\n          formName: FORM_NAME,\n          errors: {\n            'gx-number': ['error'],\n            'gx-pin': ''\n          }\n        });\n        expect(state).toBeNonEmptyObject();\n        expect(state[FORM_NAME].errors['gx-pin']).toBeEmptyString();\n      });\n    });\n  });\n\n  describe('FORM_SINGLE_VALIDATE', () => {\n    describe('WHEN error messages are present', () => {\n      it('SHOULD return error message', () => {\n        const state = forms({}, {\n          type: CONST.FORM_SINGLE_VALIDATE,\n          formName: FORM_NAME,\n          errors: {\n            'gx-pin': ['error']\n          }\n        });\n        expect(state[FORM_NAME]).toBeNonEmptyObject();\n        expect(state.Giftcard.errors['gx-pin']).toBeArrayOfStrings();\n      });\n\n      it('SHOULD be able to return multiple error messages', () => {\n        const state = forms(prevState, {\n          type: CONST.FORM_SINGLE_VALIDATE,\n          formName: FORM_NAME,\n          errors: {\n            'gx-number': ['error'],\n            'gx-pin': ['error']\n          }\n        });\n        expect(state).toBeNonEmptyObject();\n        expect(state[FORM_NAME].errors).toHaveMember('gx-number');\n        expect(state[FORM_NAME].errors).toHaveMember('gx-pin');\n      });\n\n      it('SHOULD remove error messages WHEN no error is present', () => {\n        const state = forms(prevState, {\n          type: CONST.FORM_SINGLE_VALIDATE,\n          formName: FORM_NAME,\n          errors: {\n            'gx-number': ['error'],\n            'gx-pin': ''\n          }\n        });\n        expect(state).toBeNonEmptyObject();\n        expect(state[FORM_NAME].errors['gx-pin']).toBeEmptyString();\n      });\n    });\n  });\n\n  describe('FORM_RESET', () => {\n    it('SHOULD reset the form state AND empty the input fields', () => {\n      const state = forms(prevState, {\n        type: CONST.FORM_RESET,\n        formName: FORM_NAME\n      });\n      expect(state).toBeNonEmptyObject();\n      expect(state[FORM_NAME].errors).toBeEmptyObject();\n      expect(state[FORM_NAME].values).toBeEmptyObject();\n    });\n  });\n\n  describe('FORM_TRIGGER_VALIDATION', () => {\n    it('SHOULD set the validation trigger to be true', () => {\n      const state = forms(prevState, {\n        type: CONST.FORM_TRIGGER_VALIDATION,\n        formName: FORM_NAME,\n        trigger: true\n      });\n      expect(state).toBeNonEmptyObject();\n      expect(state[FORM_NAME].isTriggerValidation).toBe(true);\n    });\n\n    it('SHOULD set the validation trigger to be false', () => {\n      const state = forms(prevState, {\n        type: CONST.FORM_TRIGGER_VALIDATION,\n        formName: FORM_NAME,\n        trigger: false\n      });\n      expect(state).toBeNonEmptyObject();\n      expect(state[FORM_NAME].isTriggerValidation).toBe(false);\n    });\n  });\n});\n\n"]}