{"version":3,"sources":["../../src/forms/formReducerSpec.js"],"names":["CONST","describe","FORM_NAME","prevState","beforeEach","Forms","Giftcard","errors","it","state","oldMember","type","expect","toHaveMember","PIN_VALUE","FORM_INITIAL_DATA","formName","values","toBeNonEmptyObject","toBe","ERROR_VALUE","FORM_DATA_REPLACE","FORM_DATA_MERGE","NUMBER_VALUE","toBeDefined","FORM_INPUT_CHANGE","formInput","oldState","not","dummyProp","FORM_VALIDATE","toBeArrayOfStrings","toBeEmptyString","FORM_SINGLE_VALIDATE","FORM_RESET","toBeEmptyObject","FORM_TRIGGER_VALIDATION","trigger","isTriggerValidation"],"mappings":";;AAAA;;;;AACA;;IAAYA,K;;;;;;;;AAEZC,SAAS,cAAT,EAAyB,YAAM;AAC7B,MAAMC,YAAY,UAAlB;AACA,MAAIC,kBAAJ;;AAEAC,aAAW,YAAM;AACfD,gBAAY;AACVE,aAAO;AACLC,kBAAU;AACRC,kBAAQ;AACN,sBAAU,CAAC,uBAAD;AADJ;AADA;AADL;AADG,KAAZ;AASD,GAVD;;AAYAN,WAAS,iCAAT,EAA4C,YAAM;AAChDO,OAAG,mCAAH,EAAwC,YAAM;AAC5C,UAAMC,QAAQ,2BAAM;AAClBC,mBAAW;AADO,OAAN,EAEX;AACDC,cAAM;AADL,OAFW,CAAd;AAKAC,aAAOH,KAAP,EAAcI,YAAd,CAA2B,WAA3B;AACD,KAPD;AAQD,GATD;;AAWAZ,WAAS,mBAAT,EAA8B,YAAM;AAClCA,aAAS,6CAAT,EAAwD,YAAM;AAC5DO,SAAG,qDAAH,EAA0D,YAAM;AAC9D,YAAMM,YAAY,MAAlB;AACA,YAAML,QAAQ,2BAAM,EAAN,EAAU;AACtBE,gBAAMX,MAAMe,iBADU;AAEtBC,oBAAUd,SAFY;AAGtBe,kBAAQ;AACN,sBAAUH;AADJ;AAHc,SAAV,CAAd;AAOAF,eAAOH,MAAMP,SAAN,EAAiBe,MAAxB,EAAgCC,kBAAhC;AACAN,eAAOH,MAAMP,SAAN,EAAiBe,MAAjB,CAAwB,QAAxB,CAAP,EAA0CE,IAA1C,CAA+CL,SAA/C;AACD,OAXD;;AAaAN,SAAG,qDAAH,EAA0D,YAAM;AAC9D,YAAMY,cAAc,kBAApB;AACA,YAAMX,QAAQ,2BAAM,EAAN,EAAU;AACtBE,gBAAMX,MAAMe,iBADU;AAEtBC,oBAAUd,SAFY;AAGtBK,kBAAQ;AACN,sBAAU,CAACa,WAAD;AADJ;AAHc,SAAV,CAAd;AAOAR,eAAOH,MAAMP,SAAN,EAAiBK,MAAxB,EAAgCW,kBAAhC;AACAN,eAAOH,MAAMP,SAAN,EAAiBK,MAAjB,CAAwB,QAAxB,EAAkC,CAAlC,CAAP,EAA6CY,IAA7C,CAAkDC,WAAlD;AACD,OAXD;AAYD,KA1BD;AA2BD,GA5BD;;AA8BAnB,WAAS,mBAAT,EAA8B,YAAM;AAClCA,aAAS,qCAAT,EAAgD,YAAM;AACpDO,SAAG,qDAAH,EAA0D,YAAM;AAC9D,YAAMM,YAAY,MAAlB;AACA,YAAML,QAAQ,2BAAM,EAAN,EAAU;AACtBE,gBAAMX,MAAMqB,iBADU;AAEtBL,oBAAUd,SAFY;AAGtBe,kBAAQ;AACN,sBAAUH;AADJ;AAHc,SAAV,CAAd;AAOAF,eAAOH,MAAMP,SAAN,EAAiBe,MAAxB,EAAgCC,kBAAhC;AACAN,eAAOH,MAAMP,SAAN,EAAiBe,MAAjB,CAAwB,QAAxB,CAAP,EAA0CE,IAA1C,CAA+CL,SAA/C;AACD,OAXD;;AAaAN,SAAG,qDAAH,EAA0D,YAAM;AAC9D,YAAMY,cAAc,kBAApB;AACA,YAAMX,QAAQ,2BAAM,EAAN,EAAU;AACtBE,gBAAMX,MAAMqB,iBADU;AAEtBL,oBAAUd,SAFY;AAGtBK,kBAAQ;AACN,sBAAU,CAACa,WAAD;AADJ;AAHc,SAAV,CAAd;AAOAR,eAAOH,MAAMP,SAAN,EAAiBK,MAAxB,EAAgCW,kBAAhC;AACAN,eAAOH,MAAMP,SAAN,EAAiBK,MAAjB,CAAwB,QAAxB,EAAkC,CAAlC,CAAP,EAA6CY,IAA7C,CAAkDC,WAAlD;AACD,OAXD;AAYD,KA1BD;AA2BD,GA5BD;;AA8BAnB,WAAS,iBAAT,EAA4B,YAAM;AAChCA,aAAS,qCAAT,EAAgD,YAAM;AACpDO,SAAG,qDAAH,EAA0D,YAAM;AAC9D,YAAMM,YAAY,MAAlB;AACA,YAAML,QAAQ,2BAAM,EAAN,EAAU;AACtBE,gBAAMX,MAAMsB,eADU;AAEtBN,oBAAUd,SAFY;AAGtBe,kBAAQ;AACN,sBAAUH;AADJ;AAHc,SAAV,CAAd;AAOAF,eAAOH,MAAMP,SAAN,EAAiBe,MAAxB,EAAgCC,kBAAhC;AACAN,eAAOH,MAAMP,SAAN,EAAiBe,MAAjB,CAAwB,QAAxB,CAAP,EAA0CE,IAA1C,CAA+CL,SAA/C;AACD,OAXD;;AAaAN,SAAG,qDAAH,EAA0D,YAAM;AAC9D,YAAMY,cAAc,kBAApB;AACA,YAAMX,QAAQ,2BAAM,EAAN,EAAU;AACtBE,gBAAMX,MAAMsB,eADU;AAEtBN,oBAAUd,SAFY;AAGtBK,kBAAQ;AACN,sBAAU,CAACa,WAAD;AADJ;AAHc,SAAV,CAAd;AAOAR,eAAOH,MAAMP,SAAN,EAAiBK,MAAxB,EAAgCW,kBAAhC;AACAN,eAAOH,MAAMP,SAAN,EAAiBK,MAAjB,CAAwB,QAAxB,EAAkC,CAAlC,CAAP,EAA6CY,IAA7C,CAAkDC,WAAlD;AACD,OAXD;;AAaAZ,SAAG,iEAAH,EAAsE,YAAM;AAC1E,YAAMM,YAAY,MAAlB;AACA,YAAMS,eAAe,QAArB;AACA,YAAMd,QAAQ,+CACXP,SADW,EACC;AACXe,kBAAQ;AACN,yBAAa;AADP;AADG,SADD,GAMX;AACDN,gBAAMX,MAAMsB,eADX;AAEDN,oBAAUd,SAFT;AAGDe,kBAAQ;AACN,sBAAUH;AADJ;AAHP,SANW,CAAd;AAaAF,eAAOH,MAAMP,SAAN,EAAiBe,MAAxB,EAAgCC,kBAAhC;AACAN,eAAOH,MAAMP,SAAN,EAAiBe,MAAjB,CAAwB,QAAxB,CAAP,EAA0CE,IAA1C,CAA+CL,SAA/C;AACAF,eAAOH,MAAMP,SAAN,EAAiBe,MAAjB,CAAwB,WAAxB,CAAP,EAA6CE,IAA7C,CAAkDI,YAAlD;AACD,OAnBD;;AAqBAf,SAAG,0DAAH,EAA+D,YAAM;AACnE,YAAMM,YAAY,MAAlB;AACA,YAAML,QAAQ,+CACXP,SADW,EACC;AACXK,kBAAQ;AACN,yBAAa,CAAC,kBAAD;AADP;AADG,SADD,GAMX;AACDI,gBAAMX,MAAMsB,eADX;AAEDN,oBAAUd,SAFT;AAGDe,kBAAQ;AACN,sBAAUH;AADJ;AAHP,SANW,CAAd;AAaAF,eAAOH,MAAMP,SAAN,EAAiBK,MAAxB,EAAgCiB,WAAhC;AACD,OAhBD;AAiBD,KAjED;AAkED,GAnED;;AAqEAvB,WAAS,mBAAT,EAA8B,YAAM;AAClCA,aAAS,8BAAT,EAAyC,YAAM;AAC7CO,SAAG,gEAAH,EAAqE,YAAM;AACzE,YAAMC,QAAQ,2BAAM,EAAN,EAAU;AACtBE,gBAAMX,MAAMyB,iBADU;AAEtBT,oBAAUd,SAFY;AAGtBwB,qBAAW;AACT,sBAAU;AADD;AAHW,SAAV,CAAd;AAOAd,eAAOH,MAAMP,SAAN,EAAiBe,MAAxB,EAAgCC,kBAAhC;AACD,OATD;;AAWAV,SAAG,6DAAH,EAAkE,YAAM;AACtE,YAAMC,QAAQ,+CACXP,SADW,EACC;AACXe,kBAAQ;AACN,yBAAa;AADP;AADG,SADD,GAMX;AACDN,gBAAMX,MAAMyB,iBADX;AAEDT,oBAAUd,SAFT;AAGDwB,qBAAW;AACT,sBAAU;AADD;AAHV,SANW,CAAd;AAaAd,eAAOH,MAAMP,SAAN,EAAiBe,MAAxB,EAAgCC,kBAAhC;AACD,OAfD;;AAiBAV,SAAG,kCAAH,EAAuC,YAAM;AAC3C,YAAMmB,+BACHzB,SADG,EACS;AACXe,kBAAQ;AACN,sBAAU;AADJ;AADG,SADT,CAAN;AAOA,YAAMR,QAAQ,2BAAMkB,QAAN,EAAgB;AAC5BhB,gBAAMX,MAAMyB,iBADgB;AAE5BT,oBAAUd,SAFkB;AAG5BwB,qBAAW;AACT,sBAAU;AADD;AAHiB,SAAhB,CAAd;AAOAd,eAAOH,KAAP,EAAcmB,GAAd,CAAkBT,IAAlB,CAAuBQ,QAAvB;AACAf,eAAOH,MAAMP,SAAN,EAAiBe,MAAjB,CAAwB,QAAxB,CAAP,EAA0CE,IAA1C,CAA+CQ,SAASzB,SAAT,EAAoBe,MAApB,CAA2B,QAA3B,CAA/C;AACD,OAjBD;;AAmBAT,SAAG,iEAAH,EAAsE,YAAM;AAC1E,YAAMmB;AACJE,qBAAW;AADP,WAEH3B,SAFG,EAES;AACXe,kBAAQ;AACN,sBAAU;AADJ,WADG;AAIXV,kBAAQ;AACN,sBAAU,CAAC,eAAD;AADJ;AAJG,SAFT,CAAN;AAWA,YAAME,QAAQ,2BAAMkB,QAAN,EAAgB;AAC5BhB,gBAAMX,MAAMyB,iBADgB;AAE5BT,oBAAUd,SAFkB;AAG5BwB,qBAAW;AACT,sBAAU;AADD;AAHiB,SAAhB,CAAd;;AAQAd,eAAOH,KAAP,EAAcI,YAAd,CAA2B,WAA3B;AACD,OArBD;AAsBD,KAtED;AAuED,GAxED;;AA0EAZ,WAAS,eAAT,EAA0B,YAAM;AAC9BA,aAAS,iCAAT,EAA4C,YAAM;AAChDO,SAAG,6BAAH,EAAkC,YAAM;AACtC,YAAMC,QAAQ,2BAAM,EAAN,EAAU;AACtBE,gBAAMX,MAAM8B,aADU;AAEtBd,oBAAUd,SAFY;AAGtBK,kBAAQ;AACN,sBAAU,CAAC,OAAD;AADJ;AAHc,SAAV,CAAd;AAOAK,eAAOH,MAAMP,SAAN,CAAP,EAAyBgB,kBAAzB;AACAN,eAAOH,MAAMH,QAAN,CAAeC,MAAf,CAAsB,QAAtB,CAAP,EAAwCwB,kBAAxC;AACD,OAVD;;AAYAvB,SAAG,kDAAH,EAAuD,YAAM;AAC3D,YAAMC,QAAQ,2BAAMN,SAAN,EAAiB;AAC7BQ,gBAAMX,MAAM8B,aADiB;AAE7Bd,oBAAUd,SAFmB;AAG7BK,kBAAQ;AACN,yBAAa,CAAC,OAAD,CADP;AAEN,sBAAU,CAAC,OAAD;AAFJ;AAHqB,SAAjB,CAAd;AAQAK,eAAOH,KAAP,EAAcS,kBAAd;AACAN,eAAOH,MAAMP,SAAN,EAAiBK,MAAxB,EAAgCM,YAAhC,CAA6C,WAA7C;AACAD,eAAOH,MAAMP,SAAN,EAAiBK,MAAxB,EAAgCM,YAAhC,CAA6C,QAA7C;AACD,OAZD;;AAcAL,SAAG,uDAAH,EAA4D,YAAM;AAChE,YAAMC,QAAQ,2BAAMN,SAAN,EAAiB;AAC7BQ,gBAAMX,MAAM8B,aADiB;AAE7Bd,oBAAUd,SAFmB;AAG7BK,kBAAQ;AACN,yBAAa,CAAC,OAAD,CADP;AAEN,sBAAU;AAFJ;AAHqB,SAAjB,CAAd;AAQAK,eAAOH,KAAP,EAAcS,kBAAd;AACAN,eAAOH,MAAMP,SAAN,EAAiBK,MAAjB,CAAwB,QAAxB,CAAP,EAA0CyB,eAA1C;AACD,OAXD;AAYD,KAvCD;AAwCD,GAzCD;;AA2CA/B,WAAS,sBAAT,EAAiC,YAAM;AACrCA,aAAS,iCAAT,EAA4C,YAAM;AAChDO,SAAG,6BAAH,EAAkC,YAAM;AACtC,YAAMC,QAAQ,2BAAM,EAAN,EAAU;AACtBE,gBAAMX,MAAMiC,oBADU;AAEtBjB,oBAAUd,SAFY;AAGtBK,kBAAQ;AACN,sBAAU,CAAC,OAAD;AADJ;AAHc,SAAV,CAAd;AAOAK,eAAOH,MAAMP,SAAN,CAAP,EAAyBgB,kBAAzB;AACAN,eAAOH,MAAMH,QAAN,CAAeC,MAAf,CAAsB,QAAtB,CAAP,EAAwCwB,kBAAxC;AACD,OAVD;;AAYAvB,SAAG,kDAAH,EAAuD,YAAM;AAC3D,YAAMC,QAAQ,2BAAMN,SAAN,EAAiB;AAC7BQ,gBAAMX,MAAMiC,oBADiB;AAE7BjB,oBAAUd,SAFmB;AAG7BK,kBAAQ;AACN,yBAAa,CAAC,OAAD,CADP;AAEN,sBAAU,CAAC,OAAD;AAFJ;AAHqB,SAAjB,CAAd;AAQAK,eAAOH,KAAP,EAAcS,kBAAd;AACAN,eAAOH,MAAMP,SAAN,EAAiBK,MAAxB,EAAgCM,YAAhC,CAA6C,WAA7C;AACAD,eAAOH,MAAMP,SAAN,EAAiBK,MAAxB,EAAgCM,YAAhC,CAA6C,QAA7C;AACD,OAZD;;AAcAL,SAAG,uDAAH,EAA4D,YAAM;AAChE,YAAMC,QAAQ,2BAAMN,SAAN,EAAiB;AAC7BQ,gBAAMX,MAAMiC,oBADiB;AAE7BjB,oBAAUd,SAFmB;AAG7BK,kBAAQ;AACN,yBAAa,CAAC,OAAD,CADP;AAEN,sBAAU;AAFJ;AAHqB,SAAjB,CAAd;AAQAK,eAAOH,KAAP,EAAcS,kBAAd;AACAN,eAAOH,MAAMP,SAAN,EAAiBK,MAAjB,CAAwB,QAAxB,CAAP,EAA0CyB,eAA1C;AACD,OAXD;AAYD,KAvCD;AAwCD,GAzCD;;AA2CA/B,WAAS,YAAT,EAAuB,YAAM;AAC3BO,OAAG,wDAAH,EAA6D,YAAM;AACjE,UAAMC,QAAQ,2BAAMN,SAAN,EAAiB;AAC7BQ,cAAMX,MAAMkC,UADiB;AAE7BlB,kBAAUd;AAFmB,OAAjB,CAAd;AAIAU,aAAOH,KAAP,EAAcS,kBAAd;AACAN,aAAOH,MAAMP,SAAN,EAAiBK,MAAxB,EAAgC4B,eAAhC;AACAvB,aAAOH,MAAMP,SAAN,EAAiBe,MAAxB,EAAgCkB,eAAhC;AACD,KARD;AASD,GAVD;;AAYAlC,WAAS,yBAAT,EAAoC,YAAM;AACxCO,OAAG,8CAAH,EAAmD,YAAM;AACvD,UAAMC,QAAQ,2BAAMN,SAAN,EAAiB;AAC7BQ,cAAMX,MAAMoC,uBADiB;AAE7BpB,kBAAUd,SAFmB;AAG7BmC,iBAAS;AAHoB,OAAjB,CAAd;AAKAzB,aAAOH,KAAP,EAAcS,kBAAd;AACAN,aAAOH,MAAMP,SAAN,EAAiBoC,mBAAxB,EAA6CnB,IAA7C,CAAkD,IAAlD;AACD,KARD;;AAUAX,OAAG,+CAAH,EAAoD,YAAM;AACxD,UAAMC,QAAQ,2BAAMN,SAAN,EAAiB;AAC7BQ,cAAMX,MAAMoC,uBADiB;AAE7BpB,kBAAUd,SAFmB;AAG7BmC,iBAAS;AAHoB,OAAjB,CAAd;AAKAzB,aAAOH,KAAP,EAAcS,kBAAd;AACAN,aAAOH,MAAMP,SAAN,EAAiBoC,mBAAxB,EAA6CnB,IAA7C,CAAkD,KAAlD;AACD,KARD;AASD,GApBD;AAqBD,CA7VD","file":"formReducerSpec.js","sourcesContent":["import forms from './formReducer';\nimport * as CONST from './formConstants';\n\ndescribe('Form Reducer', () => {\n  const FORM_NAME = 'Giftcard';\n  let prevState;\n\n  beforeEach(() => {\n    prevState = {\n      Forms: {\n        Giftcard: {\n          errors: {\n            'gx-pin': ['I am an error message']\n          }\n        }\n      }\n    };\n  });\n\n  describe('WHEN action type does not exist', () => {\n    it('SHOULD return the last know state', () => {\n      const state = forms({\n        oldMember: 1\n      }, {\n        type: 'NON_EXISTENT'\n      });\n      expect(state).toHaveMember('oldMember');\n    });\n  });\n\n  describe('FORM_INITIAL_DATA', () => {\n    describe('WHEN initial values AND/OR errors are given', () => {\n      it('SHOULD return the given values as part of the state', () => {\n        const PIN_VALUE = '1234';\n        const state = forms({}, {\n          type: CONST.FORM_INITIAL_DATA,\n          formName: FORM_NAME,\n          values: {\n            'gx-pin': PIN_VALUE\n          }\n        });\n        expect(state[FORM_NAME].values).toBeNonEmptyObject();\n        expect(state[FORM_NAME].values['gx-pin']).toBe(PIN_VALUE);\n      });\n\n      it('SHOULD return the given errors as part of the state', () => {\n        const ERROR_VALUE = 'this is an error';\n        const state = forms({}, {\n          type: CONST.FORM_INITIAL_DATA,\n          formName: FORM_NAME,\n          errors: {\n            'gx-pin': [ERROR_VALUE]\n          }\n        });\n        expect(state[FORM_NAME].errors).toBeNonEmptyObject();\n        expect(state[FORM_NAME].errors['gx-pin'][0]).toBe(ERROR_VALUE);\n      });\n    });\n  });\n\n  describe('FORM_DATA_REPLACE', () => {\n    describe('WHEN values AND/OR errors are given', () => {\n      it('SHOULD return the given values as part of the state', () => {\n        const PIN_VALUE = '1234';\n        const state = forms({}, {\n          type: CONST.FORM_DATA_REPLACE,\n          formName: FORM_NAME,\n          values: {\n            'gx-pin': PIN_VALUE\n          }\n        });\n        expect(state[FORM_NAME].values).toBeNonEmptyObject();\n        expect(state[FORM_NAME].values['gx-pin']).toBe(PIN_VALUE);\n      });\n\n      it('SHOULD return the given errors as part of the state', () => {\n        const ERROR_VALUE = 'this is an error';\n        const state = forms({}, {\n          type: CONST.FORM_DATA_REPLACE,\n          formName: FORM_NAME,\n          errors: {\n            'gx-pin': [ERROR_VALUE]\n          }\n        });\n        expect(state[FORM_NAME].errors).toBeNonEmptyObject();\n        expect(state[FORM_NAME].errors['gx-pin'][0]).toBe(ERROR_VALUE);\n      });\n    });\n  });\n\n  describe('FORM_DATA_MERGE', () => {\n    describe('WHEN values AND/OR errors are given', () => {\n      it('SHOULD return the given values as part of the state', () => {\n        const PIN_VALUE = '1234';\n        const state = forms({}, {\n          type: CONST.FORM_DATA_MERGE,\n          formName: FORM_NAME,\n          values: {\n            'gx-pin': PIN_VALUE\n          }\n        });\n        expect(state[FORM_NAME].values).toBeNonEmptyObject();\n        expect(state[FORM_NAME].values['gx-pin']).toBe(PIN_VALUE);\n      });\n\n      it('SHOULD return the given errors as part of the state', () => {\n        const ERROR_VALUE = 'this is an error';\n        const state = forms({}, {\n          type: CONST.FORM_DATA_MERGE,\n          formName: FORM_NAME,\n          errors: {\n            'gx-pin': [ERROR_VALUE]\n          }\n        });\n        expect(state[FORM_NAME].errors).toBeNonEmptyObject();\n        expect(state[FORM_NAME].errors['gx-pin'][0]).toBe(ERROR_VALUE);\n      });\n\n      it('SHOULD return existing values + new values as part of the state', () => {\n        const PIN_VALUE = '1234';\n        const NUMBER_VALUE = 'A00001';\n        const state = forms({\n          [FORM_NAME]: {\n            values: {\n              'gx-number': 'A00001'\n            }\n          }\n        }, {\n          type: CONST.FORM_DATA_MERGE,\n          formName: FORM_NAME,\n          values: {\n            'gx-pin': PIN_VALUE\n          }\n        });\n        expect(state[FORM_NAME].values).toBeNonEmptyObject();\n        expect(state[FORM_NAME].values['gx-pin']).toBe(PIN_VALUE);\n        expect(state[FORM_NAME].values['gx-number']).toBe(NUMBER_VALUE);\n      });\n\n      it('SHOULD return remove all errors WHEN errors are existing', () => {\n        const PIN_VALUE = '1234';\n        const state = forms({\n          [FORM_NAME]: {\n            errors: {\n              'gx-number': ['this is an error']\n            }\n          }\n        }, {\n          type: CONST.FORM_DATA_MERGE,\n          formName: FORM_NAME,\n          values: {\n            'gx-pin': PIN_VALUE\n          }\n        });\n        expect(state[FORM_NAME].errors).toBeDefined();\n      });\n    });\n  });\n\n  describe('FORM_INPUT_CHANGE', () => {\n    describe('WHEN an input value is given', () => {\n      it('SHOULD return the given input field value as part of the state', () => {\n        const state = forms({}, {\n          type: CONST.FORM_INPUT_CHANGE,\n          formName: FORM_NAME,\n          formInput: {\n            'gx-pin': '1234'\n          }\n        });\n        expect(state[FORM_NAME].values).toBeNonEmptyObject();\n      });\n\n      it('SHOULD return the state of sibling inputs, IF there are any', () => {\n        const state = forms({\n          [FORM_NAME]: {\n            values: {\n              'gx-number': '007'\n            }\n          }\n        }, {\n          type: CONST.FORM_INPUT_CHANGE,\n          formName: FORM_NAME,\n          formInput: {\n            'gx-pin': '1234'\n          }\n        });\n        expect(state[FORM_NAME].values).toBeNonEmptyObject();\n      });\n\n      it('SHOULD always return a new state', () => {\n        const oldState = {\n          [FORM_NAME]: {\n            values: {\n              'gx-pin': '1234'\n            }\n          }\n        };\n        const state = forms(oldState, {\n          type: CONST.FORM_INPUT_CHANGE,\n          formName: FORM_NAME,\n          formInput: {\n            'gx-pin': '1234'\n          }\n        });\n        expect(state).not.toBe(oldState);\n        expect(state[FORM_NAME].values['gx-pin']).toBe(oldState[FORM_NAME].values['gx-pin']);\n      });\n\n      it('SHOULD always return all other state members (like form errors)', () => {\n        const oldState = {\n          dummyProp: 1,\n          [FORM_NAME]: {\n            values: {\n              'gx-pin': '1234'\n            },\n            errors: {\n              'gx-pin': ['error message']\n            }\n          }\n        };\n        const state = forms(oldState, {\n          type: CONST.FORM_INPUT_CHANGE,\n          formName: FORM_NAME,\n          formInput: {\n            'gx-pin': '1234'\n          }\n        });\n\n        expect(state).toHaveMember('dummyProp');\n      });\n    });\n  });\n\n  describe('FORM_VALIDATE', () => {\n    describe('WHEN error messages are present', () => {\n      it('SHOULD return error message', () => {\n        const state = forms({}, {\n          type: CONST.FORM_VALIDATE,\n          formName: FORM_NAME,\n          errors: {\n            'gx-pin': ['error']\n          }\n        });\n        expect(state[FORM_NAME]).toBeNonEmptyObject();\n        expect(state.Giftcard.errors['gx-pin']).toBeArrayOfStrings();\n      });\n\n      it('SHOULD be able to return multiple error messages', () => {\n        const state = forms(prevState, {\n          type: CONST.FORM_VALIDATE,\n          formName: FORM_NAME,\n          errors: {\n            'gx-number': ['error'],\n            'gx-pin': ['error']\n          }\n        });\n        expect(state).toBeNonEmptyObject();\n        expect(state[FORM_NAME].errors).toHaveMember('gx-number');\n        expect(state[FORM_NAME].errors).toHaveMember('gx-pin');\n      });\n\n      it('SHOULD remove error messages WHEN no error is present', () => {\n        const state = forms(prevState, {\n          type: CONST.FORM_VALIDATE,\n          formName: FORM_NAME,\n          errors: {\n            'gx-number': ['error'],\n            'gx-pin': ''\n          }\n        });\n        expect(state).toBeNonEmptyObject();\n        expect(state[FORM_NAME].errors['gx-pin']).toBeEmptyString();\n      });\n    });\n  });\n\n  describe('FORM_SINGLE_VALIDATE', () => {\n    describe('WHEN error messages are present', () => {\n      it('SHOULD return error message', () => {\n        const state = forms({}, {\n          type: CONST.FORM_SINGLE_VALIDATE,\n          formName: FORM_NAME,\n          errors: {\n            'gx-pin': ['error']\n          }\n        });\n        expect(state[FORM_NAME]).toBeNonEmptyObject();\n        expect(state.Giftcard.errors['gx-pin']).toBeArrayOfStrings();\n      });\n\n      it('SHOULD be able to return multiple error messages', () => {\n        const state = forms(prevState, {\n          type: CONST.FORM_SINGLE_VALIDATE,\n          formName: FORM_NAME,\n          errors: {\n            'gx-number': ['error'],\n            'gx-pin': ['error']\n          }\n        });\n        expect(state).toBeNonEmptyObject();\n        expect(state[FORM_NAME].errors).toHaveMember('gx-number');\n        expect(state[FORM_NAME].errors).toHaveMember('gx-pin');\n      });\n\n      it('SHOULD remove error messages WHEN no error is present', () => {\n        const state = forms(prevState, {\n          type: CONST.FORM_SINGLE_VALIDATE,\n          formName: FORM_NAME,\n          errors: {\n            'gx-number': ['error'],\n            'gx-pin': ''\n          }\n        });\n        expect(state).toBeNonEmptyObject();\n        expect(state[FORM_NAME].errors['gx-pin']).toBeEmptyString();\n      });\n    });\n  });\n\n  describe('FORM_RESET', () => {\n    it('SHOULD reset the form state AND empty the input fields', () => {\n      const state = forms(prevState, {\n        type: CONST.FORM_RESET,\n        formName: FORM_NAME\n      });\n      expect(state).toBeNonEmptyObject();\n      expect(state[FORM_NAME].errors).toBeEmptyObject();\n      expect(state[FORM_NAME].values).toBeEmptyObject();\n    });\n  });\n\n  describe('FORM_TRIGGER_VALIDATION', () => {\n    it('SHOULD set the validation trigger to be true', () => {\n      const state = forms(prevState, {\n        type: CONST.FORM_TRIGGER_VALIDATION,\n        formName: FORM_NAME,\n        trigger: true\n      });\n      expect(state).toBeNonEmptyObject();\n      expect(state[FORM_NAME].isTriggerValidation).toBe(true);\n    });\n\n    it('SHOULD set the validation trigger to be false', () => {\n      const state = forms(prevState, {\n        type: CONST.FORM_TRIGGER_VALIDATION,\n        formName: FORM_NAME,\n        trigger: false\n      });\n      expect(state).toBeNonEmptyObject();\n      expect(state[FORM_NAME].isTriggerValidation).toBe(false);\n    });\n  });\n});\n\n"]}