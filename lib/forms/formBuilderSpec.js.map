{"version":3,"sources":["../../src/forms/formBuilderSpec.js"],"names":["describe","wrapper","spyObj","formStateMock","clonedComp","clonedCompRendered","validationEvents","invalidateEvent","validateEvent","beforeEach","errors","firstName","values","onValidateMock","onInvalidateMock","onFocusMock","onBlurMock","onFocusFromJsx","onChangeMock","onChangeFromJsx","onBlurFromJsx","onClickFromJsx","spyOn","children","prop","onFocus","onBlur","onValidate","onInvalidate","onValueChange","it","expect","find","length","toBe","FormError","simulate","toHaveBeenCalled","builder","formBuilder","bind","toThrowError","target","value","not"],"mappings":"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","file":"formBuilderSpec.js","sourcesContent":["import React from 'react';\nimport { shallow } from 'enzyme';\nimport formBuilder from './formBuilder';\nimport FormError from './formError';\n\ndescribe('formBuilder', () => {\n  describe('Iterates through each child and decorates all form elements with the given props', () => {\n    let wrapper;\n    let spyObj;\n    let formStateMock;\n    let clonedComp;\n    let clonedCompRendered;\n    const validationEvents = {\n      invalidateEvent: 'onBlur',\n      validateEvent: 'onChange'\n    };\n\n    beforeEach(() => {\n      formStateMock = {\n        errors: {\n          firstName: ['error text']\n        },\n        values: {\n          firstName: 'John'\n        }\n      };\n    });\n\n    beforeEach(() => {\n      spyObj = {\n        onValidateMock: () => true,\n        onInvalidateMock: () => true,\n        onFocusMock: () => true,\n        onBlurMock: () => true,\n        onFocusFromJsx: () => true,\n        onChangeMock: () => true,\n        onChangeFromJsx: () => true,\n        onBlurFromJsx: () => true,\n        onClickFromJsx: () => true\n      };\n      spyOn(spyObj, 'onInvalidateMock');\n      spyOn(spyObj, 'onValidateMock');\n      spyOn(spyObj, 'onChangeMock');\n      spyOn(spyObj, 'onFocusMock');\n      spyOn(spyObj, 'onBlurMock');\n      spyOn(spyObj, 'onChangeFromJsx');\n      spyOn(spyObj, 'onBlurFromJsx');\n      spyOn(spyObj, 'onClickFromJsx');\n      spyOn(spyObj, 'onFocusFromJsx');\n    });\n\n    beforeEach(() => {\n      wrapper = shallow(\n        <div>\n          <h2>title here <span className=\"icon-empty\" /> </h2>\n          <div>\n              some string goes here\n            <input\n              type=\"text\"\n              name=\"firstName\"\n              id=\"firstName\"\n              onFocus={spyObj.onFocusFromJsx}\n              onChange={spyObj.onChangeFromJsx}\n              onBlur={spyObj.onBlurFromJsx}\n              onClick={spyObj.onClickFromJsx}\n            />\n            <FormError forInput=\"firstName\" />\n            <div>\n              <input type=\"checkbox\" name=\"remember\" id=\"remember\" />\n              <input type=\"radio\" name=\"radio1\" id=\"radioOption1\" />\n              <input type=\"radio\" name=\"radio1\" id=\"radioOption2\" />\n            </div>\n          </div>\n        </div>\n      );\n    });\n\n    beforeEach(() => {\n      clonedComp = formBuilder({\n        children: wrapper.prop('children'),\n        errors: formStateMock.errors,\n        values: formStateMock.values,\n        onFocus: spyObj.onFocusMock,\n        onBlur: spyObj.onBlurMock,\n        onValidate: spyObj.onValidateMock,\n        onInvalidate: spyObj.onInvalidateMock,\n        onValueChange: spyObj.onChangeMock,\n        ...validationEvents\n      });\n      clonedCompRendered = shallow(<div>{ clonedComp }</div>);\n    });\n\n    it('SHOULD clone nested elements', () => {\n      expect(clonedCompRendered.find('h2').length).toBe(1);\n      expect(clonedCompRendered.find('#firstName').length).toBe(1);\n      expect(clonedCompRendered.find('#remember').length).toBe(1);\n    });\n\n    it('SHOULD attach error messages', () => {\n      expect(clonedCompRendered.find(FormError).prop('msg'))\n        .toBe(formStateMock.errors.firstName[0]);\n    });\n\n    it('SHOULD merge existing onClick props that are passed via JSX', () => {\n      clonedCompRendered.find('#firstName').simulate('click');\n      expect(spyObj.onClickFromJsx).toHaveBeenCalled();\n    });\n\n    it('SHOULD merge existing onFocus props that are passed via JSX', () => {\n      clonedCompRendered.find('#firstName').simulate('focus');\n      expect(spyObj.onFocusFromJsx).toHaveBeenCalled();\n    });\n\n    it('SHOULD throw an error if a form element has no name', () => {\n      const builder = formBuilder.bind(null, {\n        children: <input type=\"text\" />,\n        errors: formStateMock.errors,\n        values: formStateMock.values,\n        onValidate: spyObj.onValidateMock,\n        onInvalidate: spyObj.onInvalidateMock,\n        onValueChange: spyObj.onChangeMock,\n        ...validationEvents\n      });\n      expect(builder).toThrowError();\n    });\n\n    describe('WHEN form needs to do nothing because value has not changed', () => {\n      beforeEach(() => {\n        clonedCompRendered.find('#firstName').simulate('focus', {\n          target: {\n            value: ''\n          }\n        });\n      });\n\n      beforeEach(() => {\n        clonedCompRendered.find('#firstName').simulate('blur', {\n          target: {\n            value: ''\n          }\n        });\n      });\n\n      it('SHOULD NOT attach callback handlers', () => {\n        expect(spyObj.onInvalidateMock).not.toHaveBeenCalled();\n        expect(spyObj.onValidateMock).not.toHaveBeenCalled();\n        expect(spyObj.onChangeMock).not.toHaveBeenCalled();\n      });\n\n      it('SHOULD merge existing onBlur handlers that are passed via JSX', () => {\n        expect(spyObj.onBlurFromJsx).toHaveBeenCalled();\n      });\n    });\n\n    describe('WHEN form needs to call invalidate', () => {\n      beforeEach(() => {\n        clonedCompRendered.find('#firstName').simulate('focus', {\n          target: {\n            value: ''\n          }\n        });\n      });\n\n      beforeEach(() => {\n        clonedCompRendered.find('#firstName').simulate('blur', {\n          target: {\n            value: 'change value'\n          }\n        });\n      });\n\n      it('SHOULD call onValidate callback ONLY', () => {\n        expect(spyObj.onInvalidateMock).toHaveBeenCalled();\n        expect(spyObj.onValidateMock).not.toHaveBeenCalled();\n        expect(spyObj.onChangeMock).not.toHaveBeenCalled();\n      });\n\n      it('SHOULD merge existing onBlur handlers that are passed via JSX', () => {\n        expect(spyObj.onChangeFromJsx).not.toHaveBeenCalled();\n        expect(spyObj.onBlurFromJsx).toHaveBeenCalled();\n      });\n    });\n\n    describe('WHEN form needs to call validate', () => {\n      beforeEach(() => {\n        clonedCompRendered.find('#firstName').simulate('change', {\n          target: {\n            value: 'change value'\n          }\n        });\n      });\n\n      it('SHOULD call onInvalidate and onChange callbacks ONLY', () => {\n        expect(spyObj.onInvalidateMock).not.toHaveBeenCalled();\n        expect(spyObj.onValidateMock).toHaveBeenCalled();\n        expect(spyObj.onChangeMock).toHaveBeenCalled();\n      });\n\n      it('SHOULD merge existing onChange handlers that are passed via JSX', () => {\n        expect(spyObj.onChangeFromJsx).toHaveBeenCalled();\n        expect(spyObj.onBlurFromJsx).not.toHaveBeenCalled();\n      });\n    });\n  });\n});\n\n"]}