{"version":3,"sources":["../../src/forms/formBuilderSpec.js"],"names":["describe","wrapper","spyObj","formStateMock","clonedComp","clonedCompRendered","beforeEach","errors","firstName","values","onValidateMock","onChangeMock","onChangeFromJsx","onBlurFromJsx","onClickFromJsx","spyOn","children","prop","onValidate","onValueChange","find","simulate","target","value","it","builder","bind","expect","toThrowError","length","toBe","toHaveBeenCalled"],"mappings":"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","file":"formBuilderSpec.js","sourcesContent":["import React from 'react';\nimport { shallow } from 'enzyme';\nimport formBuilder from './formBuilder';\nimport FormError from './formError';\n\ndescribe('formBuilder', () => {\n  describe(\n    `Iterates through each child and decorates all form elements\n    with the given callback handlers, error message, values etc.`\n  , () => {\n    let wrapper;\n    let spyObj;\n    let formStateMock;\n    let clonedComp;\n    let clonedCompRendered;\n\n    beforeEach(() => {\n      formStateMock = {\n        errors: {\n          firstName: ['error text']\n        },\n        values: {\n          firstName: 'John'\n        }\n      };\n    });\n\n    beforeEach(() => {\n      spyObj = {\n        onValidateMock: () => true,\n        onChangeMock: () => true,\n        onChangeFromJsx: () => true,\n        onBlurFromJsx: () => true,\n        onClickFromJsx: () => true\n      };\n      spyOn(spyObj, 'onValidateMock');\n      spyOn(spyObj, 'onChangeMock');\n      spyOn(spyObj, 'onChangeFromJsx');\n      spyOn(spyObj, 'onBlurFromJsx');\n      spyOn(spyObj, 'onClickFromJsx');\n    });\n\n    beforeEach(() => {\n      wrapper = shallow(\n        <div>\n          <h2>title here <span className=\"icon-empty\"></span> </h2>\n          <div>\n            some string goes here\n            <input type=\"text\" name=\"firstName\" id=\"firstName\"\n              onChange={spyObj.onChangeFromJsx}\n              onBlur={spyObj.onBlurFromJsx}\n              onClick={spyObj.onClickFromJsx}\n            />\n            <FormError forInput=\"firstName\" />\n            <div>\n              <input type=\"checkbox\" name=\"remember\" id=\"remember\" />\n              <input type=\"radio\" name=\"radio1\" id=\"radioOption1\" />\n              <input type=\"radio\" name=\"radio1\" id=\"radioOption2\" />\n            </div>\n          </div>\n        </div>\n      );\n    });\n\n    beforeEach(() => {\n      clonedComp = formBuilder({\n        children: wrapper.prop('children'),\n        errors: formStateMock.errors,\n        values: formStateMock.values,\n        onValidate: spyObj.onValidateMock,\n        onValueChange: spyObj.onChangeMock\n      });\n      clonedCompRendered = shallow(\n        <div>{ clonedComp }</div>\n      );\n    });\n\n    beforeEach(() => {\n      clonedCompRendered.find('#firstName').simulate('change', {\n        target: {\n          value: 'change value'\n        }\n      });\n      clonedCompRendered.find('#firstName').simulate('blur');\n    });\n\n    it('SHOULD throw an error if a form element has no name', () => {\n      const builder = formBuilder.bind(null, {\n        children: <input type=\"text\" />,\n        errors: formStateMock.errors,\n        values: formStateMock.values,\n        onValidate: spyObj.onValidateMock,\n        onValueChange: spyObj.onChangeMock\n      });\n      expect(builder).toThrowError();\n    });\n\n    it('SHOULD clone nested elements', () => {\n      expect(clonedCompRendered.find('h2').length).toBe(1);\n      expect(clonedCompRendered.find('#firstName').length).toBe(1);\n      expect(clonedCompRendered.find('#remember').length).toBe(1);\n    });\n\n    it('SHOULD attach error messages', () => {\n      expect(clonedCompRendered.find(FormError).prop('msg'))\n        .toBe(formStateMock.errors.firstName[0]);\n    });\n\n    it('SHOULD attach callback handlers', () => {\n      expect(spyObj.onValidateMock).toHaveBeenCalled();\n      expect(spyObj.onChangeMock).toHaveBeenCalled();\n    });\n\n    it('SHOULD merge existing onChange and onBlur handlers that are passed via JSX', () => {\n      expect(spyObj.onChangeFromJsx).toHaveBeenCalled();\n      expect(spyObj.onBlurFromJsx).toHaveBeenCalled();\n    });\n\n    it('SHOULD merge existing form element props that are passed via JSX', () => {\n      clonedCompRendered.find('#firstName').simulate('click');\n      expect(spyObj.onClickFromJsx).toHaveBeenCalled();\n    });\n  });\n});\n"]}