{"version":3,"sources":["../../src/forms/formUtilsSpec.js"],"names":["utils","describe","it","expect","isAReactEl","toBe","undefined","isAFormEl","isAFormGroup","nonFormComponent","dummy","decoratedFormComponent","mockRefs","formValues","beforeEach","firstName","value","email","password","remember","checked","radioItemDelivery","radioItemCollection","country","notes","getFormData","prop","values","toBeEmptyObject","toBeBoolean","radioItem","validation","rules","required","lastName","middleName","nickName","messages","children","validationRules","filterValidation","toHaveMember","not","omitValidation","line1"],"mappings":"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","file":"formUtilsSpec.js","sourcesContent":["import React from 'react';\nimport { shallow } from 'enzyme';\nimport * as utils from './formUtils';\nimport FormGroup from './formGroup';\n\ndescribe('Form Utilities', () => {\n  describe('isAReactEl', () => {\n    it('SHOULD return true if this is a React element', () => {\n      expect(utils.isAReactEl(<input />)).toBe(true);\n    });\n\n    it('SHOULD return false if this is NOT a React element', () => {\n      expect(utils.isAReactEl(undefined)).toBe(false);\n    });\n  });\n\n  describe('isAFormEl', () => {\n    it('SHOULD return true if this is an input element', () => {\n      expect(utils.isAFormEl(<input />)).toBe(true);\n    });\n\n    it('SHOULD return true if this is a textarea element', () => {\n      expect(utils.isAFormEl(<textarea />)).toBe(true);\n    });\n\n    it('SHOULD return true if this is a select element', () => {\n      expect(utils.isAFormEl(<select />)).toBe(true);\n    });\n\n    it('SHOULD return false if this is NOT a known form element', () => {\n      expect(utils.isAFormEl(<div />)).toBe(false);\n    });\n  });\n\n  describe('isAFormGroup', () => {\n    it('SHOULD return true if this is a FormGroup element', () => {\n      expect(utils.isAFormGroup(<FormGroup />)).toBe(true);\n    });\n\n    it('SHOULD return false if this is NOT a FormGroup element', () => {\n      expect(utils.isAFormGroup(<div />)).toBe(false);\n    });\n  });\n\n  describe('getFormData', () => {\n    describe('Transforms the input values from the DOM as a plain object', () => {\n      let nonFormComponent;\n      let dummy;\n      let decoratedFormComponent;\n      let mockRefs;\n      let formValues;\n\n      beforeEach(() => {\n        mockRefs = {\n          firstName: {\n            value: 'john doe'\n          },\n          email: {\n            value: 'john@doe.com'\n          },\n          password: {\n            value: 'password123'\n          },\n          remember: {\n            value: 'not this',\n            checked: true\n          },\n          radioItemDelivery: {\n            value: 'delivery',\n            checked: false\n          },\n          radioItemCollection: {\n            value: 'collection',\n            checked: true\n          },\n          country: {\n            value: 'GB'\n          },\n          notes: {\n            value: 'This is a note.'\n          }\n        };\n      });\n\n      beforeEach(() => {\n        dummy = () => (<div>this is a custom react component</div>);\n      });\n\n      beforeEach(() => {\n        decoratedFormComponent = shallow(\n          <div>\n            <input type=\"text\" name=\"firstName\" />\n            <input type=\"email\" name=\"email\" />\n            <input type=\"password\" name=\"password\" />\n            <div>\n              <input type=\"checkbox\" name=\"remember\" />\n            </div>\n            <input type=\"radio\" name=\"radioItem\" value=\"Delivery\" />\n            <input type=\"radio\" name=\"radioItem\" value=\"Collection\" />\n            <select name=\"country\">\n              <option value=\"None\" >Please Select</option>\n              <option value=\"GB\" >United Kingdom</option>\n              <option value=\"DE\" >Germany</option>\n            </select>\n            <textarea name=\"notes\" />\n          </div>\n        );\n      });\n\n      beforeEach(() => {\n        nonFormComponent = shallow(\n          <div>\n            some root level string that needs to be ignored\n            <dummy />\n            <div id=\"dummy\">dummy</div>\n            <button>dummy button</button>\n          </div>\n        );\n      });\n\n      beforeEach(() => {\n        formValues = utils.getFormData(decoratedFormComponent.prop('children'), mockRefs);\n      });\n\n      it('SHOULD ignore NON form elements like - strings, divs, buttons, custom components', () => {\n        const values = utils.getFormData(nonFormComponent.prop('children'), null);\n        expect(values).toBeEmptyObject();\n      });\n\n      it('SHOULD return values for regular inputs - text, email, password', () => {\n        expect(formValues.firstName).toBe(mockRefs.firstName.value);\n        expect(formValues.email).toBe(mockRefs.email.value);\n        expect(formValues.password).toBe(mockRefs.password.value);\n      });\n\n      it('SHOULD return values for checkbox input', () => {\n        expect(formValues.remember).toBeBoolean();\n        expect(formValues.remember).toBe(mockRefs.remember.checked);\n      });\n\n      it('SHOULD return values for radio input', () => {\n        expect(formValues.radioItem).toBe(mockRefs.radioItemCollection.value);\n      });\n\n      it('SHOULD return values for select list', () => {\n        expect(formValues.country).toBe(mockRefs.country.value);\n      });\n\n      it('SHOULD return values for textareas', () => {\n        expect(formValues.notes).toBe(mockRefs.notes.value);\n      });\n    });\n  });\n\n  describe('filterValidation', () => {\n    const validation = {\n      rules: {\n        firstName: {\n          required: true\n        },\n        lastName: {\n          required: true\n        },\n        middleName: {\n          required: true\n        },\n        nickName: {\n          required: true\n        }\n      },\n      messages: {\n        firstName: {\n          required: 'Please enter your first name'\n        },\n        lastName: {\n          required: 'Please enter your last name'\n        },\n        middleName: {\n          required: 'Please enter your middle name'\n        },\n        nickName: {\n          required: 'Please enter your nick name'\n        }\n      }\n    };\n\n    it('SHOULD return only the rules and messages matching the given inputs', () => {\n      const children = (\n        <div>\n          <input name=\"firstName\" />\n          <input name=\"lastName\" />\n        </div>\n      );\n      const validationRules = utils.filterValidation({\n        children,\n        validation\n      });\n\n      expect(validationRules.rules).toHaveMember('firstName');\n      expect(validationRules.messages).toHaveMember('lastName');\n      expect(validationRules.rules).not.toHaveMember('nickName');\n      expect(validationRules.messages).not.toHaveMember('middleName');\n    });\n\n    it('SHOULD return only the rules and messages matching the given textarea', () => {\n      const children = (\n        <div>\n          <textarea name=\"firstName\" type=\"text\" />\n          <textarea name=\"lastName\" type=\"text\" />\n        </div>\n      );\n      const validationRules = utils.filterValidation({\n        children,\n        validation\n      });\n\n      expect(validationRules.rules).toHaveMember('firstName');\n      expect(validationRules.messages).toHaveMember('lastName');\n      expect(validationRules.rules).not.toHaveMember('nickName');\n      expect(validationRules.messages).not.toHaveMember('middleName');\n    });\n\n    it('SHOULD return only the rules and messages matching the given select', () => {\n      const children = (\n        <div>\n          <select name=\"firstName\">\n            <option>John</option>\n          </select>\n          <select name=\"lastName\">\n            <option>Smith</option>\n          </select>\n        </div>\n      );\n      const validationRules = utils.filterValidation({\n        children,\n        validation\n      });\n\n      expect(validationRules.rules).toHaveMember('firstName');\n      expect(validationRules.messages).toHaveMember('lastName');\n      expect(validationRules.rules).not.toHaveMember('nickName');\n      expect(validationRules.messages).not.toHaveMember('middleName');\n    });\n\n    it('SHOULD return only the rules and messages matching the given radio and checkbox', () => {\n      const children = (\n        <div>\n          <input name=\"firstName\" type=\"checkbox\" />\n          <input name=\"lastName\" type=\"radio\" />\n        </div>\n      );\n      const validationRules = utils.filterValidation({\n        children,\n        validation\n      });\n\n      expect(validationRules.rules).toHaveMember('firstName');\n      expect(validationRules.messages).toHaveMember('lastName');\n      expect(validationRules.rules).not.toHaveMember('nickName');\n      expect(validationRules.messages).not.toHaveMember('middleName');\n    });\n\n    it('SHOULD return only the rules and messages matching the given nested form elements', () => {\n      const children = (\n        <div>\n          <div>\n            <div>\n              <div>\n                <div />\n                string text\n                <input name=\"firstName\" type=\"checkbox\" />\n                <input name=\"lastName\" type=\"radio\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n      const validationRules = utils.filterValidation({\n        children,\n        validation\n      });\n\n      expect(validationRules.rules).toHaveMember('firstName');\n      expect(validationRules.messages).toHaveMember('lastName');\n      expect(validationRules.rules).not.toHaveMember('nickName');\n      expect(validationRules.messages).not.toHaveMember('middleName');\n    });\n  });\n\n  describe('omitValidation', () => {\n    let omitValidation;\n    let validation;\n    beforeEach(() => {\n      validation = {\n        rules: {\n          firstName: {\n            required: true\n          },\n          lastName: {\n            required: true\n          },\n          line1: {\n            required: true\n          }\n        },\n        messages: {\n          firstName: {\n            required: 'Please enter your first name'\n          },\n          lastName: {\n            required: 'Please enter your last name'\n          },\n          line1: {\n            required: 'Please enter your Address'\n          }\n        }\n      };\n      omitValidation = utils.omitValidation(validation, ['firstName', 'lastName']);\n    });\n\n    it('SHOULD return rules and messages members', () => {\n      expect(omitValidation).toHaveMember('rules');\n      expect(omitValidation).toHaveMember('messages');\n    });\n\n    it('SHOULD return picked rules', () => {\n      expect(omitValidation.rules).toHaveMember('line1');\n      expect(omitValidation.rules.line1).toHaveMember('required');\n    });\n\n    it('SHOULD return picked messages', () => {\n      expect(omitValidation.messages).toHaveMember('line1');\n      expect(omitValidation.messages.line1).toHaveMember('required');\n      expect(omitValidation.messages.line1.required)\n        .toBe(validation.messages.line1.required);\n    });\n\n    it('SHOULD NOT return omitted rules', () => {\n      expect(omitValidation.rules).not.toHaveMember('firstName');\n      expect(omitValidation.rules).not.toHaveMember('lastName');\n    });\n\n    it('SHOULD NOT return omitted messages', () => {\n      expect(omitValidation.messages).not.toHaveMember('firstName');\n      expect(omitValidation.messages).not.toHaveMember('lastName');\n    });\n  });\n});\n"]}