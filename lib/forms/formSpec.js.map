{"version":3,"sources":["../../src/forms/formSpec.js"],"names":["CONST","describe","wrapper","validationObj","defaultValues","getForm","store","beforeEach","rules","required","minlength","messages","Forms","afterEach","unmount","it","expect","find","length","toBeGreaterThan","text","toStartWith","hasClass","toBe","errorMsg","mockReducer","Giftcard","errors","simulate","ERROR_INPUT_CLASS_NAME","first","prop","values","toBeUndefined","last","node","value","Simulate","change","blur"],"mappings":"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","file":"formSpec.js","sourcesContent":["import React from 'react';\nimport ReactTestUtils from 'react-addons-test-utils';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { mount } from 'enzyme';\nimport ConnectedForm from './form';\nimport * as CONST from './formConstants';\nimport FormError from './formError';\n\ndescribe('Form Container', () => {\n  describe(\n    `A decorator component which clones all its children and decorates each form element\n    with event handlers, values, error messages, input refs and CSS classes.\n    See \"formBuilder.js\" for the actual function`\n  , () => {\n    let wrapper;\n    let validationObj;\n    const defaultValues = {\n      'gx-pin': '1234'\n    };\n\n    const getForm = (store) => (\n      <Provider store={store}>\n        <ConnectedForm\n          handleValidForm={() => true}\n          action=\"/\"\n          formName=\"Giftcard\"\n          validation={validationObj}\n          className=\"extra-class\"\n          defaultValues={defaultValues}\n        >\n          This is a string for the form which should not cause build form to break\n          <div>\n            <input name=\"gx-number\" id=\"gxNumber\" type=\"text\" />\n            <FormError forInput=\"gx-number\" />\n            <input name=\"gx-pin\" id=\"gxPin\" type=\"text\" />\n            <FormError forInput=\"gx-pin\" />\n            <div id=\"nestedDiv\">nested string</div>\n          </div>\n          <button />\n        </ConnectedForm>\n      </Provider>\n    );\n\n    beforeEach(() => {\n      validationObj = {\n        rules: {\n          'gx-number': {\n            required: true\n          },\n          'gx-pin': {\n            required: true,\n            minlength: 4\n          }\n        },\n        messages: {\n          'gx-number': {\n            required: 'Please enter a valid giftcard number'\n          },\n          'gx-pin': {\n            required: 'Please enter a valid giftcard pin',\n            minlength: 'It has to be 4 characters long'\n          }\n        }\n      };\n    });\n\n    beforeEach(() => {\n      const store = createStore(() => ({ Forms: {} }));\n      wrapper = mount(getForm(store));\n    });\n\n    afterEach(() => {\n      wrapper.unmount();\n    });\n\n    it('SHOULD render component children', () => {\n      expect(wrapper.find('div').length).toBeGreaterThan(0);\n    });\n\n    it('SHOULD render string children', () => {\n      expect(wrapper.find('form').text()).toStartWith('This is a string');\n    });\n\n    it('SHOULD render nested string children', () => {\n      expect(wrapper.find('#nestedDiv').text()).toStartWith('nested');\n    });\n\n    it('SHOULD render nested component children', () => {\n      expect(wrapper.find('input').length).toBeGreaterThan(0);\n    });\n\n    it('SHOULD assign extra properties to the Form element', () => {\n      expect(wrapper.find('form').hasClass('extra-class')).toBe(true);\n    });\n\n    describe('Event handler', () => {\n      describe('On Submit', () => {\n        describe('This event is triggered when the form is submitted by the user', () => {\n          describe('WHEN error is present', () => {\n            const errorMsg = 'error message';\n            beforeEach(() => {\n              const mockReducer = () => ({\n                Forms: {\n                  Giftcard: {\n                    errors: {\n                      'gx-number': [errorMsg]\n                    }\n                  }\n                }\n              });\n              const store = createStore(mockReducer, applyMiddleware(thunk));\n              wrapper = mount(getForm(store));\n              wrapper.find('form').simulate('submit');\n            });\n\n            it('SHOULD add error input class', () => {\n              expect(wrapper.find('#gxNumber').hasClass(CONST.ERROR_INPUT_CLASS_NAME)).toBe(true);\n            });\n\n            it('SHOULD show error message', () => {\n              expect(wrapper.find(FormError).first().prop('msg')).toBe(errorMsg);\n            });\n\n            describe('AND error is removed', () => {\n              beforeEach(() => {\n                const mockReducer = () => ({\n                  Forms: {\n                    Giftcard: {\n                      values: {\n                        'gx-number': 'some value',\n                        'gx-pin': '1234'\n                      },\n                      errors: {\n                        'gx-number': ''\n                      }\n                    }\n                  }\n                });\n                const store = createStore(mockReducer, applyMiddleware(thunk));\n                wrapper = mount(getForm(store));\n                wrapper.find('form').simulate('submit');\n              });\n\n              it('SHOULD remove error input class', () => {\n                expect(wrapper.find('#gxNumber')\n                  .hasClass(CONST.ERROR_INPUT_CLASS_NAME)).toBe(false);\n              });\n              it('SHOULD remove error message', () => {\n                expect(wrapper.find(FormError).first().prop('msg')).toBeUndefined();\n              });\n            });\n          });\n        });\n      });\n\n      describe('On Validate', () => {\n        describe('This event is triggered ON BLUR', () => {\n          describe('WHEN error is present', () => {\n            const errorMsg = 'error message';\n            beforeEach(() => {\n              const mockReducer = () => ({\n                Forms: {\n                  Giftcard: {\n                    errors: {\n                      'gx-pin': [errorMsg]\n                    }\n                  }\n                }\n              });\n              const store = createStore(mockReducer, applyMiddleware(thunk));\n\n              wrapper = mount(getForm(store));\n            });\n\n            it('SHOULD add error input class', () => {\n              expect(wrapper.find('#gxPin').hasClass(CONST.ERROR_INPUT_CLASS_NAME)).toBe(true);\n            });\n\n            it('SHOULD show error message', () => {\n              expect(wrapper.find(FormError).last().prop('msg')).toBe(errorMsg);\n            });\n\n            describe('WHEN value is changed', () => {\n              beforeEach(() => {\n                const mockReducer = () => ({\n                  Forms: {\n                    Giftcard: {}\n                  }\n                });\n\n                const store = createStore(mockReducer, applyMiddleware(thunk));\n                wrapper = mount(getForm(store));\n              });\n\n              it('SHOULD trigger validation', () => {\n                // smoke test no expect needed\n                wrapper.find('#gxPin').node.value = 'asfas';\n                ReactTestUtils.Simulate.change(wrapper.find('#gxPin').node);\n                ReactTestUtils.Simulate.blur(wrapper.find('#gxPin').node);\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});\n"]}