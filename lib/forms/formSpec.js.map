{"version":3,"sources":["../../src/forms/formSpec.js"],"names":["CONST","describe","wrapper","validationObj","defaultValues","getForm","store","beforeEach","rules","required","minlength","messages","Forms","afterEach","unmount","it","expect","find","length","toBeGreaterThan","text","toStartWith","hasClass","toBe","errorMsg","mockReducer","Giftcard","errors","simulate","target","value","ERROR_INPUT_CLASS_NAME","first","prop","values","toBeUndefined","last"],"mappings":";;AAAA;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;AACA;;;;AACA;;IAAYA,K;;AACZ;;;;;;;;AAEAC,SAAS,gBAAT,EAA2B,YAAM;AAC/BA,kOAII,YAAM;AACN,QAAIC,gBAAJ;AACA,QAAIC,sBAAJ;AACA,QAAMC,gBAAgB;AACpB,gBAAU;AADU,KAAtB;;AAIA,QAAMC,UAAU,SAAVA,OAAU;AAAA,aACd;AAAA;AAAA,UAAU,OAAOC,KAAjB;AACE;AAAA;AAAA;AACE,6BAAiB;AAAA,qBAAM,IAAN;AAAA,aADnB;AAEE,+BAAmB;AAAA,qBAAM,IAAN;AAAA,aAFrB;AAGE,oBAAO,GAHT;AAIE,sBAAS,UAJX;AAKE,wBAAYH,aALd;AAME,uBAAU,aANZ;AAOE,2BAAeC,aAPjB;AAQE,2BAAc,QARhB;AASE,6BAAgB;AATlB;AAAA;AAYE;AAAA;AAAA,cAAK,IAAG,WAAR,EAAoB,mBAAgB,QAApC;AACE;AAAA;AAAA,gBAAO,SAAQ,WAAf;AAAA;AAEE,uDAAO,MAAK,WAAZ,EAAwB,IAAG,WAA3B,EAAuC,MAAK,MAA5C;AAFF,aADF;AAKE,iEAAW,UAAS,WAApB,GALF;AAME;AAAA;AAAA,gBAAO,IAAG,aAAV,EAAwB,SAAQ,QAAhC;AAAA;AAEE,uDAAO,MAAK,QAAZ,EAAqB,IAAG,QAAxB,EAAiC,MAAK,MAAtC;AAFF,aANF;AAUE,iEAAW,UAAS,QAApB,GAVF;AAWE;AAAA;AAAA,gBAAK,IAAG,WAAR;AAAA;AAAA;AAXF,WAZF;AAyBE;AAzBF;AADF,OADc;AAAA,KAAhB;;AAgCAG,eAAW,YAAM;AACfJ,sBAAgB;AACdK,eAAO;AACL,uBAAa;AACXC,sBAAU;AADC,WADR;AAIL,oBAAU;AACRA,sBAAU,IADF;AAERC,uBAAW;AAFH;AAJL,SADO;AAUdC,kBAAU;AACR,uBAAa;AACXF,sBAAU;AADC,WADL;AAIR,oBAAU;AACRA,sBAAU,mCADF;AAERC,uBAAW;AAFH;AAJF;AAVI,OAAhB;AAoBD,KArBD;;AAuBAH,eAAW,YAAM;AACf,UAAMD,QAAQ,wBAAY;AAAA,eAAO,EAAEM,OAAO,EAAT,EAAP;AAAA,OAAZ,CAAd;AACAV,gBAAU,mBAAMG,QAAQC,KAAR,CAAN,CAAV;AACD,KAHD;;AAKAO,cAAU,YAAM;AACdX,cAAQY,OAAR;AACD,KAFD;;AAIAC,OAAG,kCAAH,EAAuC,YAAM;AAC3CC,aAAOd,QAAQe,IAAR,CAAa,KAAb,EAAoBC,MAA3B,EAAmCC,eAAnC,CAAmD,CAAnD;AACD,KAFD;;AAIAJ,OAAG,+BAAH,EAAoC,YAAM;AACxCC,aAAOd,QAAQe,IAAR,CAAa,MAAb,EAAqBG,IAArB,EAAP,EAAoCC,WAApC,CAAgD,kBAAhD;AACD,KAFD;;AAIAN,OAAG,sCAAH,EAA2C,YAAM;AAC/CC,aAAOd,QAAQe,IAAR,CAAa,YAAb,EAA2BG,IAA3B,EAAP,EAA0CC,WAA1C,CAAsD,QAAtD;AACD,KAFD;;AAIAN,OAAG,yCAAH,EAA8C,YAAM;AAClDC,aAAOd,QAAQe,IAAR,CAAa,OAAb,EAAsBC,MAA7B,EAAqCC,eAArC,CAAqD,CAArD;AACD,KAFD;;AAIAJ,OAAG,oDAAH,EAAyD,YAAM;AAC7DC,aAAOd,QAAQe,IAAR,CAAa,MAAb,EAAqBK,QAArB,CAA8B,aAA9B,CAAP,EAAqDC,IAArD,CAA0D,IAA1D;AACD,KAFD;;AAIAtB,aAAS,eAAT,EAA0B,YAAM;AAC9BA,eAAS,WAAT,EAAsB,YAAM;AAC1BA,iBAAS,gEAAT,EAA2E,YAAM;AAC/EA,mBAAS,uBAAT,EAAkC,YAAM;AACtC,gBAAMuB,WAAW,eAAjB;AACAjB,uBAAW,YAAM;AACf,kBAAMkB,cAAc,SAAdA,WAAc;AAAA,uBAAO;AACzBb,yBAAO;AACLc,8BAAU;AACRC,8BAAQ;AACN,qCAAa,CAACH,QAAD;AADP;AADA;AADL;AADkB,iBAAP;AAAA,eAApB;AASA,kBAAMlB,QAAQ,wBAAYmB,WAAZ,EAAyB,iDAAzB,CAAd;AACAvB,wBAAU,mBAAMG,QAAQC,KAAR,CAAN,CAAV;AACAJ,sBAAQe,IAAR,CAAa,MAAb,EAAqBW,QAArB,CAA8B,QAA9B;AACD,aAbD;;AAeAb,eAAG,+CAAH,EAAoD,YAAM;AACxDb,sBAAQe,IAAR,CAAa,SAAb,EACGW,QADH,CACY,QADZ,EACsB,EAAEC,QAAQ,EAAEC,OAAO,OAAT,EAAV,EADtB,EAEGF,QAFH,CAEY,MAFZ,EAEoB,EAAEC,QAAQ,EAAEC,OAAO,OAAT,EAAV,EAFpB,EAGGF,QAHH,CAGY,QAHZ,EAGsB,EAAEC,QAAQ,EAAEC,OAAO,GAAT,EAAV,EAHtB,EAIGF,QAJH,CAIY,MAJZ,EAIoB,EAAEC,QAAQ,EAAEC,OAAO,GAAT,EAAV,EAJpB;AAKA;;;;AAID,aAVD;;AAYAf,eAAG,8BAAH,EAAmC,YAAM;AACvCC,qBAAOd,QAAQe,IAAR,CAAa,YAAb,EAA2BK,QAA3B,CAAoCtB,MAAM+B,sBAA1C,CAAP,EAA0ER,IAA1E,CAA+E,IAA/E;AACD,aAFD;;AAIAR,eAAG,2BAAH,EAAgC,YAAM;AACpCC,qBAAOd,QAAQe,IAAR,sBAAwBe,KAAxB,GAAgCC,IAAhC,CAAqC,KAArC,CAAP,EAAoDV,IAApD,CAAyDC,QAAzD;AACD,aAFD;;AAIAvB,qBAAS,sBAAT,EAAiC,YAAM;AACrCM,yBAAW,YAAM;AACf,oBAAMkB,cAAc,SAAdA,WAAc;AAAA,yBAAO;AACzBb,2BAAO;AACLc,gCAAU;AACRQ,gCAAQ;AACN,uCAAa,YADP;AAEN,oCAAU;AAFJ,yBADA;AAKRP,gCAAQ;AACN,uCAAa;AADP;AALA;AADL;AADkB,mBAAP;AAAA,iBAApB;AAaA,oBAAMrB,QAAQ,wBAAYmB,WAAZ,EAAyB,iDAAzB,CAAd;AACAvB,0BAAU,mBAAMG,QAAQC,KAAR,CAAN,CAAV;AACAJ,wBAAQe,IAAR,CAAa,MAAb,EAAqBW,QAArB,CAA8B,QAA9B;AACD,eAjBD;;AAmBAb,iBAAG,iCAAH,EAAsC,YAAM;AAC1CC,uBAAOd,QAAQe,IAAR,CAAa,YAAb,EACJK,QADI,CACKtB,MAAM+B,sBADX,CAAP,EAC2CR,IAD3C,CACgD,KADhD;AAED,eAHD;AAIAR,iBAAG,6BAAH,EAAkC,YAAM;AACtCC,uBAAOd,QAAQe,IAAR,sBAAwBe,KAAxB,GAAgCC,IAAhC,CAAqC,KAArC,CAAP,EAAoDE,aAApD;AACD,eAFD;AAGD,aA3BD;AA4BD,WAjED;AAkED,SAnED;AAoED,OArED;;AAuEAlC,eAAS,aAAT,EAAwB,YAAM;AAC5BA,iBAAS,iCAAT,EAA4C,YAAM;AAChDA,mBAAS,uBAAT,EAAkC,YAAM;AACtC,gBAAMuB,WAAW,eAAjB;AACAjB,uBAAW,YAAM;AACf,kBAAMkB,cAAc,SAAdA,WAAc;AAAA,uBAAO;AACzBb,yBAAO;AACLc,8BAAU;AACRC,8BAAQ;AACN,kCAAU,CAACH,QAAD;AADJ;AADA;AADL;AADkB,iBAAP;AAAA,eAApB;AASA,kBAAMlB,QAAQ,wBAAYmB,WAAZ,EAAyB,iDAAzB,CAAd;;AAEAvB,wBAAU,mBAAMG,QAAQC,KAAR,CAAN,CAAV;AACD,aAbD;;AAeAS,eAAG,8BAAH,EAAmC,YAAM;AACvCC,qBAAOd,QAAQe,IAAR,CAAa,SAAb,EAAwBK,QAAxB,CAAiCtB,MAAM+B,sBAAvC,CAAP,EAAuER,IAAvE,CAA4E,IAA5E;AACD,aAFD;;AAIAR,eAAG,qDAAH,EAA0D,YAAM;AAC9DC,qBAAOd,QAAQe,IAAR,CAAa,YAAb,EAA2BK,QAA3B,CAAoCtB,MAAM+B,sBAA1C,CAAP,EAA0ER,IAA1E,CAA+E,IAA/E;AACD,aAFD;;AAIAR,eAAG,+CAAH,EAAoD,YAAM;AACxDC,qBAAOd,QAAQe,IAAR,CAAa,cAAb,EAA6BK,QAA7B,CAAsCtB,MAAM+B,sBAA5C,CAAP,EAA4ER,IAA5E,CAAiF,IAAjF;AACD,aAFD;;AAIAR,eAAG,2BAAH,EAAgC,YAAM;AACpCC,qBAAOd,QAAQe,IAAR,sBAAwBmB,IAAxB,GAA+BH,IAA/B,CAAoC,KAApC,CAAP,EAAmDV,IAAnD,CAAwDC,QAAxD;AACD,aAFD;AAGD,WAhCD;AAiCD,SAlCD;AAmCD,OApCD;AAqCD,KA7GD;AA8GD,GA7MH;AA+MD,CAhND","file":"formSpec.js","sourcesContent":["import 'jsdom-global/register';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { mount } from 'enzyme';\nimport ConnectedForm from './form';\nimport * as CONST from './formConstants';\nimport FormError from './formError';\n\ndescribe('Form Container', () => {\n  describe(\n    `A decorator component which clones all its children and decorates each form element\n    with event handlers, values, error messages, input refs and CSS classes.\n    See \"formBuilder.js\" for the actual function`\n    , () => {\n      let wrapper;\n      let validationObj;\n      const defaultValues = {\n        'gx-pin': '1234'\n      };\n\n      const getForm = store => (\n        <Provider store={store}>\n          <ConnectedForm\n            handleValidForm={() => true}\n            handleInvalidForm={() => true}\n            action=\"/\"\n            formName=\"Giftcard\"\n            validation={validationObj}\n            className=\"extra-class\"\n            defaultValues={defaultValues}\n            validateEvent=\"onBlur\"\n            invalidateEvent=\"onBlur\"\n          >\n            This is a string for the form which should not cause build form to break\n            <div id=\"gx-holder\" data-form-error=\"gx-pin\">\n              <label htmlFor=\"gx-number\">\n                GX Number\n                <input name=\"gx-number\" id=\"gx-number\" type=\"text\" />\n              </label>\n              <FormError forInput=\"gx-number\" />\n              <label id=\"gx-pin-abel\" htmlFor=\"gx-pin\">\n                GX Pin\n                <input name=\"gx-pin\" id=\"gx-pin\" type=\"text\" />\n              </label>\n              <FormError forInput=\"gx-pin\" />\n              <div id=\"nestedDiv\">nested string</div>\n            </div>\n            <button />\n          </ConnectedForm>\n        </Provider>\n      );\n\n      beforeEach(() => {\n        validationObj = {\n          rules: {\n            'gx-number': {\n              required: true\n            },\n            'gx-pin': {\n              required: true,\n              minlength: 4\n            }\n          },\n          messages: {\n            'gx-number': {\n              required: 'Please enter a valid giftcard number'\n            },\n            'gx-pin': {\n              required: 'Please enter a valid giftcard pin',\n              minlength: 'It has to be 4 characters long'\n            }\n          }\n        };\n      });\n\n      beforeEach(() => {\n        const store = createStore(() => ({ Forms: {} }));\n        wrapper = mount(getForm(store));\n      });\n\n      afterEach(() => {\n        wrapper.unmount();\n      });\n\n      it('SHOULD render component children', () => {\n        expect(wrapper.find('div').length).toBeGreaterThan(0);\n      });\n\n      it('SHOULD render string children', () => {\n        expect(wrapper.find('form').text()).toStartWith('This is a string');\n      });\n\n      it('SHOULD render nested string children', () => {\n        expect(wrapper.find('#nestedDiv').text()).toStartWith('nested');\n      });\n\n      it('SHOULD render nested component children', () => {\n        expect(wrapper.find('input').length).toBeGreaterThan(0);\n      });\n\n      it('SHOULD assign extra properties to the Form element', () => {\n        expect(wrapper.find('form').hasClass('extra-class')).toBe(true);\n      });\n\n      describe('Event handler', () => {\n        describe('On Submit', () => {\n          describe('This event is triggered when the form is submitted by the user', () => {\n            describe('WHEN error is present', () => {\n              const errorMsg = 'error message';\n              beforeEach(() => {\n                const mockReducer = () => ({\n                  Forms: {\n                    Giftcard: {\n                      errors: {\n                        'gx-number': [errorMsg]\n                      }\n                    }\n                  }\n                });\n                const store = createStore(mockReducer, applyMiddleware(thunk));\n                wrapper = mount(getForm(store));\n                wrapper.find('form').simulate('submit');\n              });\n\n              it('SHOULD execute validate and invalidate events', () => {\n                wrapper.find('#gx-pin')\n                  .simulate('change', { target: { value: '12345' } })\n                  .simulate('blur', { target: { value: '12345' } })\n                  .simulate('change', { target: { value: '1' } })\n                  .simulate('blur', { target: { value: '1' } });\n                /*\n                  no need to expect, test is validated by making sure\n                  'getValidateEvents' in formBuilder is 100% test covered\n                */\n              });\n\n              it('SHOULD add error input class', () => {\n                expect(wrapper.find('#gx-number').hasClass(CONST.ERROR_INPUT_CLASS_NAME)).toBe(true);\n              });\n\n              it('SHOULD show error message', () => {\n                expect(wrapper.find(FormError).first().prop('msg')).toBe(errorMsg);\n              });\n\n              describe('AND error is removed', () => {\n                beforeEach(() => {\n                  const mockReducer = () => ({\n                    Forms: {\n                      Giftcard: {\n                        values: {\n                          'gx-number': 'some value',\n                          'gx-pin': '1234'\n                        },\n                        errors: {\n                          'gx-number': ''\n                        }\n                      }\n                    }\n                  });\n                  const store = createStore(mockReducer, applyMiddleware(thunk));\n                  wrapper = mount(getForm(store));\n                  wrapper.find('form').simulate('submit');\n                });\n\n                it('SHOULD remove error input class', () => {\n                  expect(wrapper.find('#gx-number')\n                    .hasClass(CONST.ERROR_INPUT_CLASS_NAME)).toBe(false);\n                });\n                it('SHOULD remove error message', () => {\n                  expect(wrapper.find(FormError).first().prop('msg')).toBeUndefined();\n                });\n              });\n            });\n          });\n        });\n\n        describe('On Validate', () => {\n          describe('This event is triggered ON BLUR', () => {\n            describe('WHEN error is present', () => {\n              const errorMsg = 'error message';\n              beforeEach(() => {\n                const mockReducer = () => ({\n                  Forms: {\n                    Giftcard: {\n                      errors: {\n                        'gx-pin': [errorMsg]\n                      }\n                    }\n                  }\n                });\n                const store = createStore(mockReducer, applyMiddleware(thunk));\n\n                wrapper = mount(getForm(store));\n              });\n\n              it('SHOULD add error input class', () => {\n                expect(wrapper.find('#gx-pin').hasClass(CONST.ERROR_INPUT_CLASS_NAME)).toBe(true);\n              });\n\n              it('SHOULD add error class to a data-form-error element', () => {\n                expect(wrapper.find('#gx-holder').hasClass(CONST.ERROR_INPUT_CLASS_NAME)).toBe(true);\n              });\n\n              it('SHOULD add error class to input element label', () => {\n                expect(wrapper.find('#gx-pin-abel').hasClass(CONST.ERROR_INPUT_CLASS_NAME)).toBe(true);\n              });\n\n              it('SHOULD show error message', () => {\n                expect(wrapper.find(FormError).last().prop('msg')).toBe(errorMsg);\n              });\n            });\n          });\n        });\n      });\n    }\n  );\n});\n"]}