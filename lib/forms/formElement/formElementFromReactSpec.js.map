{"version":3,"sources":["../../../src/forms/formElement/formElementFromReactSpec.js"],"names":["describe","mockInputAndRef","type","name","val","input","refs","value","it","inputValue","getKeyVal","expect","toBeNull","toBeUndefined","INPUT","mock","toBeNonEmptyObject","textarea","props","toBe","select","CHKBOX_NAME","checkbox","checked","RADIO_NAME","radio"],"mappings":"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","file":"formElementFromReactSpec.js","sourcesContent":["import React from 'react';\nimport formElementFromReact from './formElementFromReact';\n\ndescribe('FormElementFromReact', () => {\n  describe('Use this to get the value from the React object', () => {\n    describe('WHEN input type is text, number, password, email', () => {\n      function mockInputAndRef(type, name, val = 'val') {\n        return {\n          input: <input type={type} name={name} />,\n          refs: {\n            [name]: {\n              value: val\n            }\n          }\n        };\n      }\n\n      it('SHOULD return null for unknown elements', () => {\n        const inputValue = formElementFromReact({\n          type: 'button'\n        }, null).getKeyVal();\n        expect(inputValue).toBeNull();\n      });\n\n      it('SHOULD return undefined for untouched form elements', () => {\n        const name = 'undefinedEl';\n        const inputValue = formElementFromReact(<input type=\"text\" name={name} />, {}).getKeyVal();\n        expect(inputValue.name).toBeUndefined();\n      });\n\n      it('SHOULD return the value for text input elements', () => {\n        const INPUT = 'text-member';\n        const mock = mockInputAndRef('text', INPUT);\n        const inputValue = formElementFromReact(mock.input, mock.refs).getKeyVal();\n        expect(inputValue).toBeNonEmptyObject();\n      });\n\n      it('SHOULD return the value for password input elements', () => {\n        const INPUT = 'password-member';\n        const mock = mockInputAndRef('password', INPUT);\n        const inputValue = formElementFromReact(mock.input, mock.refs).getKeyVal();\n        expect(inputValue).toBeNonEmptyObject();\n      });\n\n      it('SHOULD return the value for email input elements', () => {\n        const INPUT = 'email-member';\n        const mock = mockInputAndRef('email', INPUT);\n        const inputValue = formElementFromReact(mock.input, mock.refs).getKeyVal();\n        expect(inputValue).toBeNonEmptyObject();\n      });\n\n      it('SHOULD return the value for number input elements', () => {\n        const INPUT = 'number-member';\n        const mock = mockInputAndRef('number', INPUT, 123);\n        const inputValue = formElementFromReact(mock.input, mock.refs).getKeyVal();\n        expect(inputValue).toBeNonEmptyObject();\n      });\n    });\n\n    it('SHOULD return the value for textarea elements', () => {\n      const INPUT = 'textarea-member';\n      const textarea = {\n        type: 'textarea',\n        props: {\n          type: 'textarea',\n          name: INPUT\n        }\n      };\n      const refs = {\n        [INPUT]: {\n          value: 'dummy text data'\n        }\n      };\n      const inputValue = formElementFromReact(textarea, refs).getKeyVal();\n      expect(inputValue[INPUT]).toBe('dummy text data');\n    });\n\n    it('SHOULD return the value for select elements', () => {\n      const INPUT = 'select-member';\n      const select = <select name={INPUT} />;\n      const refs = {\n        [INPUT]: {\n          value: 'GB'\n        }\n      };\n      const inputValue = formElementFromReact(select, refs).getKeyVal();\n      expect(inputValue[INPUT]).toBe('GB');\n    });\n\n    it('SHOULD return a boolean value for checkbox inputs', () => {\n      const CHKBOX_NAME = 'sameAsDelivery';\n      const checkbox = <input name={CHKBOX_NAME} type=\"checkbox\" />;\n      const refs = {\n        [CHKBOX_NAME]: {\n          value: 'not this',\n          checked: true\n        }\n      };\n      const inputValue = formElementFromReact(checkbox, refs).getKeyVal();\n      expect(inputValue).toBeNonEmptyObject();\n    });\n\n    it('SHOULD return value for selected radio inputs', () => {\n      const RADIO_NAME = 'radio1';\n      const radio = <input name={RADIO_NAME} type=\"radio\" value=\"GB\" />;\n      const refs = {\n        [`${RADIO_NAME}GB`]: {\n          value: 'GB',\n          checked: true\n        }\n      };\n      const inputValue = formElementFromReact(radio, refs).getKeyVal();\n      expect(inputValue[RADIO_NAME]).toBe('GB');\n    });\n\n    it('SHOULD NOT return value for unselected radio inputs', () => {\n      const RADIO_NAME = 'radio1';\n      const radio = <input name={RADIO_NAME} type=\"radio\" value=\"GB\" />;\n      const refs = {\n        [`${RADIO_NAME}GB`]: {\n          value: 'GB',\n          checked: false\n        }\n      };\n      const inputValue = formElementFromReact(radio, refs).getKeyVal();\n      expect(inputValue).toBeNull();\n    });\n  });\n});\n"]}