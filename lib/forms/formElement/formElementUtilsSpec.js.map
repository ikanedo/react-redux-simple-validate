{"version":3,"sources":["../../../src/forms/formElement/formElementUtilsSpec.js"],"names":["adapter","describe","getInputElement","type","it","text","prop","email","password","number","expect","toBe","checkbox","radio"],"mappings":"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","file":"formElementUtilsSpec.js","sourcesContent":["import React from 'react';\nimport Adapter from 'enzyme-adapter-react-16';\nimport { shallow, configure } from 'enzyme';\nimport {\n  getFormInputType,\n  getFormElementType,\n  getFormElementRefName\n} from './formElementUtils';\n\nconfigure({ adapter: new Adapter() });\n\ndescribe('FormElementUtils', () => {\n  describe('getFormInputType', () => {\n    describe(`Returns the input type, tested elements include text, number, email, password\n        number, checkbox, radio. Other input elements like hidden, date, week etc. are not tested.\n      `, () => {\n        const getInputElement = type => <input type={type} />;\n\n        it('SHOULD return default for unknown types (text, number, email, etc.)', () => {\n          const text = shallow(getInputElement('text')).prop('type');\n          const email = shallow(getInputElement('email')).prop('type');\n          const password = shallow(getInputElement('password')).prop('type');\n          const number = shallow(getInputElement('number')).prop('type');\n          expect(getFormInputType(text)).toBe('default');\n          expect(getFormInputType(email)).toBe('default');\n          expect(getFormInputType(password)).toBe('default');\n          expect(getFormInputType(number)).toBe('default');\n        });\n\n        it('SHOULD return checkbox if the input type is checkbox', () => {\n          const checkbox = shallow(getInputElement('checkbox')).prop('type');\n          expect(getFormInputType(checkbox)).toBe('checkbox');\n        });\n\n        it('SHOULD return radio if the input type is radio', () => {\n          const radio = shallow(getInputElement('radio')).prop('type');\n          expect(getFormInputType(radio)).toBe('radio');\n        });\n      });\n  });\n\n  describe('getFormElementType', () => {\n    describe(`Returns the React element type and filters form elements like select, textarea and input.\n      Other possible form element types are not considered until use case arises.\n      `, () => {\n        it('SHOULD return select for select elements', () => {\n          expect(getFormElementType(<select />)).toBe('select');\n        });\n\n        it('SHOULD return default for textarea', () => {\n          expect(getFormElementType(<textarea />)).toBe('default');\n        });\n\n        it('SHOULD return default for regular input elements', () => {\n          expect(getFormElementType(<input />)).toBe('default');\n        });\n\n        it('SHOULD return radio for radio input elements', () => {\n          expect(getFormElementType(<input type=\"radio\" />)).toBe('radio');\n        });\n\n        it('SHOULD return checkbox for checkbox input elements', () => {\n          expect(getFormElementType(<input type=\"checkbox\" />)).toBe('checkbox');\n        });\n      });\n  });\n\n  describe('getFormElementRefName', () => {\n    describe(`Returns the ref name for form elements. Radio ref name is returned as (name + value)\n      WHY? since radio buttons have 1 name with multiple values, we need to identify which\n      value belongs to which name. This is not an issue with other form elements.\n      `, () => {\n        it('SHOULD return the correct name for Radio', () => {\n          expect(getFormElementRefName(<input type=\"radio\" name=\"myName\" value=\"myVal\" />)).toBe('myNamemyVal');\n        });\n\n        it(`\n        SHOULD return the correct name for Other form elements.\n        Assumption: each form element name is unique\n        `, () => {\n            expect(getFormElementRefName(<select name=\"mySelect\" />)).toBe('mySelect');\n          });\n      });\n  });\n});\n"]}