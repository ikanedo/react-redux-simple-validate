{"version":3,"sources":["../../src/forms/formGroup.js"],"names":["FormActions","FormGroup","props","onValidate","bind","onInvalidate","onValueChange","onSubmit","formValidator","formName","defaultErrors","defaultValues","setInitialData","nextProps","validation","setConstraints","isTriggerValidation","triggerValidate","values","errors","children","isSameValues","isSameErrors","isSameChildren","setValidity","handleValidForm","handleInvalidForm","formData","refs","errorMsgs","validate","isValid","e","setSingleValidity","single","target","name","setInputValue","getVal","invalidateEvent","validateEvent","className","formElements","defaultProps","mapStateToProps","state","formState","Forms"],"mappings":"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","file":"formGroup.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Validator from '../validators/validator';\nimport formElementFromEvt from './formElement/formElementFromEvt';\nimport formBuilder from './formBuilder';\nimport { filterValidation, getFormData } from './formUtils';\nimport * as FormActions from './formActions';\n\nexport class FormGroup extends Component {\n  constructor(props) {\n    super(props);\n    this.onValidate = this.onValidate.bind(this);\n    this.onInvalidate = this.onInvalidate.bind(this);\n    this.onValueChange = this.onValueChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.formValidator = new Validator(\n      filterValidation(props)\n    );\n  }\n\n  componentDidMount() {\n    const {\n      formName,\n      defaultErrors,\n      defaultValues,\n      setInitialData\n    } = this.props;\n\n    if (defaultErrors || defaultValues) {\n      setInitialData(\n        formName,\n        defaultValues,\n        defaultErrors\n      );\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.validation !== this.props.validation) {\n      this.formValidator.setConstraints(\n        filterValidation(nextProps)\n      );\n    }\n\n    if (nextProps.isTriggerValidation) {\n      this.onSubmit();\n      this.props.triggerValidate(nextProps.formName, false);\n    }\n  }\n\n  shouldComponentUpdate(nextProps) {\n    const {\n      values,\n      errors,\n      children\n    } = this.props;\n    const isSameValues = values === nextProps.values;\n    const isSameErrors = errors === nextProps.errors;\n    const isSameChildren = children === nextProps.children;\n    return !(isSameValues && isSameErrors && isSameChildren);\n  }\n\n  onSubmit() {\n    const {\n      children,\n      formName,\n      setValidity,\n      handleValidForm,\n      handleInvalidForm\n    } = this.props;\n    const formData = getFormData(children, this.refs);\n    const errorMsgs = this.formValidator.validate(formData);\n    setValidity(formName, errorMsgs);\n\n    const isValid = !errorMsgs;\n    if (isValid) {\n      handleValidForm(formData, formName);\n    } else {\n      handleInvalidForm(errorMsgs, formName);\n    }\n  }\n\n  onValidate(e) {\n    const {\n      children,\n      formName,\n      setSingleValidity\n    } = this.props;\n    const formData = getFormData(children, this.refs);\n    const errorMsgs = this.formValidator.single(e.target.name, formData);\n    const isValid = !errorMsgs;\n\n    if (isValid) {\n      setSingleValidity(\n        formName,\n        { [e.target.name]: errorMsgs }\n      );\n    }\n  }\n\n  onInvalidate(e) {\n    const {\n      children,\n      formName,\n      setSingleValidity\n    } = this.props;\n    const formData = getFormData(children, this.refs);\n    const errorMsgs = this.formValidator.single(e.target.name, formData);\n    const isValid = !errorMsgs;\n\n    if (!isValid) {\n      setSingleValidity(\n        formName,\n        { [e.target.name]: errorMsgs }\n      );\n    }\n  }\n\n  onValueChange(e) {\n    const {\n      formName,\n      setInputValue\n    } = this.props;\n\n    setInputValue(\n      formName,\n      { [e.target.name]: formElementFromEvt(e).getVal() }\n    );\n  }\n\n  render() {\n    const {\n      children,\n      values,\n      errors,\n      invalidateEvent,\n      validateEvent,\n      className\n    } = this.props;\n    const formElements = formBuilder({\n      onValidate: this.onValidate,\n      onInvalidate: this.onInvalidate,\n      onValueChange: this.onValueChange,\n      values,\n      errors,\n      children,\n      invalidateEvent,\n      validateEvent\n    });\n\n    return (\n      <div className={`form-group ${className || ''}`}>\n        {formElements}\n      </div>\n    );\n  }\n}\n\nFormGroup.defaultProps = {\n  invalidateEvent: 'onBlur',\n  validateEvent: 'onChange',\n  handleInvalidForm: () => {}\n};\n\n// FormGroup.propTypes = {\n//   children: PropTypes.node.isRequired,\n//   validation: PropTypes.shape({\n//     rules: PropTypes.object.isRequired,\n//     messages: PropTypes.object.isRequired\n//   }),\n//   handleValidForm: PropTypes.func.isRequired,\n//   handleInvalidForm: PropTypes.func.isRequired,\n//   formName: PropTypes.string.isRequired,\n//   values: PropTypes.object.isRequired,\n//   errors: PropTypes.object.isRequired,\n//   defaultValues: PropTypes.object,\n//   defaultErrors: PropTypes.object,\n//   setInitialData: PropTypes.func.isRequired,\n//   setValidity: PropTypes.func.isRequired,\n//   setSingleValidity: PropTypes.func.isRequired,\n//   setInputValue: PropTypes.func.isRequired,\n//   triggerValidate: PropTypes.func,\n//   invalidateEvent: PropTypes.string.isRequired,\n//   validateEvent: PropTypes.string.isRequired,\n//   className: PropTypes.string\n// };\n\nfunction mapStateToProps(state, props) {\n  const formState = state.Forms[props.formName] || {};\n  return {\n    values: formState.values || {},\n    errors: formState.errors || {},\n    isTriggerValidation: !!formState.isTriggerValidation\n  };\n}\n\nexport default connect(mapStateToProps, FormActions)(FormGroup);\n"]}