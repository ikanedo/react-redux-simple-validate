{"version":3,"sources":["../../src/forms/formActionsSpec.js"],"names":["Action","CONST","describe","it","action","setInitialData","expect","toHaveMember","type","toBe","FORM_INITIAL_DATA","errors","formName","setDataReplace","FORM_DATA_REPLACE","setDataMerge","FORM_DATA_MERGE","setValidity","FORM_VALIDATE","setSingleValidity","FORM_SINGLE_VALIDATE","setInputValue","FORM_INPUT_CHANGE","reset","FORM_RESET","triggerValidate","FORM_TRIGGER_VALIDATION"],"mappings":"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","file":"formActionsSpec.js","sourcesContent":["import * as Action from './formActions';\nimport * as CONST from './formConstants';\n\ndescribe('Form Actions', () => {\n  describe('setInitialData', () => {\n    describe('Tell the reducer to seed the form with initial values AND/OR errors', () => {\n      it('SHOULD return with the correct action type', () => {\n        const action = Action.setInitialData('name');\n        expect(action).toHaveMember('type');\n        expect(action.type).toBe(CONST.FORM_INITIAL_DATA);\n      });\n\n      it('SHOULD return with the given form name', () => {\n        const action = Action.setInitialData('name', { errors: {} });\n        expect(action).toHaveMember('formName');\n        expect(action.formName).toBe('name');\n      });\n\n      it('SHOULD return with an error object', () => {\n        const action = Action.setInitialData('name', {});\n        expect(action).toHaveMember('errors');\n      });\n\n      it('SHOULD return with a values object', () => {\n        const action = Action.setInitialData('name', {}, {});\n        expect(action).toHaveMember('values');\n      });\n    });\n  });\n\n  describe('setDataReplace', () => {\n    describe('Tell the reducer to replace the form data with values AND/OR errors', () => {\n      it('SHOULD return with the correct action type', () => {\n        const action = Action.setDataReplace('name');\n        expect(action).toHaveMember('type');\n        expect(action.type).toBe(CONST.FORM_DATA_REPLACE);\n      });\n\n      it('SHOULD return with the given form name', () => {\n        const action = Action.setDataReplace('name', { errors: {} });\n        expect(action).toHaveMember('formName');\n        expect(action.formName).toBe('name');\n      });\n\n      it('SHOULD return with an error object', () => {\n        const action = Action.setDataReplace('name', {});\n        expect(action).toHaveMember('errors');\n      });\n\n      it('SHOULD return with a values object', () => {\n        const action = Action.setDataReplace('name', {}, {});\n        expect(action).toHaveMember('values');\n      });\n    });\n  });\n\n  describe('setDataReplace', () => {\n    describe('Tell the reducer to merge the form values AND remove errors', () => {\n      it('SHOULD return with the correct action type', () => {\n        const action = Action.setDataMerge('name');\n        expect(action).toHaveMember('type');\n        expect(action.type).toBe(CONST.FORM_DATA_MERGE);\n      });\n\n      it('SHOULD return with the given form name', () => {\n        const action = Action.setDataMerge('name', { errors: {} });\n        expect(action).toHaveMember('formName');\n        expect(action.formName).toBe('name');\n      });\n\n      it('SHOULD return with an error object', () => {\n        const action = Action.setDataMerge('name', {});\n        expect(action).toHaveMember('errors');\n      });\n\n      it('SHOULD return with a values object', () => {\n        const action = Action.setDataMerge('name', {}, {});\n        expect(action).toHaveMember('values');\n      });\n    });\n  });\n\n  describe('setValidity', () => {\n    describe('Tell the reducer whether this form has error messages or not', () => {\n      it('SHOULD return with the correct action type', () => {\n        const action = Action.setValidity({});\n        expect(action).toHaveMember('type');\n        expect(action.type).toBe(CONST.FORM_VALIDATE);\n      });\n\n      it('SHOULD return an error message array member', () => {\n        const action = Action.setValidity({});\n        expect(action).toHaveMember('errors');\n      });\n    });\n  });\n\n  describe('setSingleValidity', () => {\n    describe('Tell the reducer whether this form element has error messages or not', () => {\n      it('SHOULD return with the correct action type', () => {\n        const action = Action.setSingleValidity({});\n        expect(action).toHaveMember('type');\n        expect(action.type).toBe(CONST.FORM_SINGLE_VALIDATE);\n      });\n\n      it('SHOULD return an error message array member', () => {\n        const action = Action.setSingleValidity({});\n        expect(action).toHaveMember('errors');\n      });\n    });\n  });\n\n  describe('setInputValue', () => {\n    describe('Tell the reducer that the value of an input element has changed', () => {\n      it('SHOULD return with the correct action type', () => {\n        const action = Action.setInputValue({});\n        expect(action).toHaveMember('type');\n        expect(action.type).toBe(CONST.FORM_INPUT_CHANGE);\n      });\n\n      it('SHOULD return with a formInput member', () => {\n        const action = Action.setInputValue({});\n        expect(action).toHaveMember('formInput');\n      });\n    });\n  });\n\n  describe('reset', () => {\n    describe('Tell the reducer to clean the form by removing all values and error messages', () => {\n      it('SHOULD return with the correct action type', () => {\n        const action = Action.reset({});\n        expect(action).toHaveMember('type');\n        expect(action.type).toBe(CONST.FORM_RESET);\n      });\n    });\n  });\n\n  describe('triggerValidate', () => {\n    describe('Tell the reducer to validate the form given', () => {\n      it('SHOULD return with the correct action type', () => {\n        let action = Action.triggerValidate('formName');\n        expect(action).toHaveMember('type');\n        expect(action.type).toBe(CONST.FORM_TRIGGER_VALIDATION);\n\n        action = Action.triggerValidate('formName', true);\n        expect(action).toHaveMember('type');\n        expect(action.type).toBe(CONST.FORM_TRIGGER_VALIDATION);\n      });\n\n      it('SHOULD return with the given params - formName, trigger', () => {\n        const action = Action.triggerValidate('formName', false);\n        expect(action).toHaveMember('formName');\n        expect(action).toHaveMember('trigger');\n      });\n    });\n  });\n});\n"]}