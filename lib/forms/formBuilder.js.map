{"version":3,"sources":["../../src/forms/formBuilder.js"],"names":["formBuilder","isLikeStringOrNum","element","isAnErrorEl","type","displayName","isAFormErrorElClass","props","htmlFor","getErrorMsg","name","errors","getErrorElProps","forInput","msg","getErrorClassElProps","inputName","errorClassName","ERROR_INPUT_CLASS_NAME","className","mergeCallbacks","args","e","filter","validate","isFunction","arg","forEach","cb","getHasValueClassName","formElementValue","isEmpty","value","HAS_VALUE_CLASS_NAME","getErrorInputClassName","hasErrors","getValidateEvents","eventType","formGroupProps","onValidate","onInvalidate","invalidateEvent","validateEvent","lastFocusValue","getLastFocusValue","getVal","getFormElProps","onChange","onBlurProp","onBlur","onFocus","values","onValueChange","stringRefs","getKeyVal","console","warn","Error","onChangeEvents","onFocusEvents","onBlurEvents","key","ref","node","hasTheValueChanged","join","getElProps","getChildren","childrenProp","recurFormBuilder","React","Children","map","children","elementProps","elementChildren","bind","cloneElement"],"mappings":"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","file":"formBuilder.js","sourcesContent":["import React from 'react';\nimport validate from 'validate.js';\nimport { isAReactEl, isAFormEl, isAFormGroup } from './formUtils';\nimport { ERROR_INPUT_CLASS_NAME, HAS_VALUE_CLASS_NAME } from './formConstants';\nimport { getFormElementRefName } from './formElement/formElementUtils';\nimport formElementFromState from './formElement/formElementFromState';\nimport formElementFromEvt from './formElement/formElementFromEvt';\n\nfunction isLikeStringOrNum(element) {\n  return !isAReactEl(element);\n}\n\nfunction isAnErrorEl({ type }) {\n  return type.displayName === 'FormError';\n}\n\nfunction isAFormErrorElClass({ props }) {\n  return !!props['data-form-error'] || !!props.htmlFor;\n}\n\nfunction getErrorMsg(name, errors) {\n  return (errors[name] || [])[0];\n}\n\nfunction getErrorElProps(element, { errors }) {\n  const { forInput } = element.props;\n  return {\n    ...element.props,\n    msg: getErrorMsg(forInput, errors)\n  };\n}\n\nfunction getErrorClassElProps(element, { errors }) {\n  const inputName = element.props['data-form-error'] || element.props.htmlFor;\n  const errorClassName = getErrorMsg(inputName, errors) ? ERROR_INPUT_CLASS_NAME : '';\n\n  return {\n    ...element.props,\n    className: `${element.props.className} ${errorClassName}`\n  };\n}\n\nfunction mergeCallbacks(...args) {\n  return (e) => {\n    args.filter(arg => validate.isFunction(arg))\n      .forEach(cb => cb(e));\n  };\n}\n\nfunction getHasValueClassName(formElementValue) {\n  const element = formElementValue || {};\n  return validate.isEmpty(element.value) ? '' : HAS_VALUE_CLASS_NAME;\n}\n\nfunction getErrorInputClassName(name, errors) {\n  const hasErrors = !!getErrorMsg(name, errors);\n  return hasErrors ? ERROR_INPUT_CLASS_NAME : '';\n}\n\nfunction getValidateEvents(eventType, formGroupProps) {\n  const {\n    onValidate,\n    onInvalidate,\n    invalidateEvent,\n    validateEvent\n  } = formGroupProps;\n\n  if (\n    invalidateEvent === eventType\n    && validateEvent === eventType\n  ) {\n    return (...args) => {\n      onInvalidate(...args);\n      onValidate(...args);\n    };\n  }\n\n  if (invalidateEvent === eventType) {\n    return onInvalidate;\n  }\n\n  if (validateEvent === eventType) {\n    return onValidate;\n  }\n\n  return null;\n}\n\nlet lastFocusValue = null;\nfunction getLastFocusValue(e) {\n  lastFocusValue = formElementFromEvt(e).getVal();\n}\n\nfunction getFormElProps(element, formGroupProps) {\n  const {\n    name,\n    onChange,\n    onBlur: onBlurProp,\n    onFocus,\n    className\n  } = element.props;\n\n  const {\n    errors,\n    values,\n    onValueChange,\n    stringRefs\n  } = formGroupProps;\n\n  const formElementValue = formElementFromState(element, values).getKeyVal();\n\n  if (\n    stringRefs\n    && element.props\n    && element.props.value\n    && formElementValue != null\n    && stringRefs[`${getFormElementRefName(element)}-value`]\n    && element.props.value !== stringRefs[`${getFormElementRefName(element)}-value`]\n    && element.props.value !== formElementValue.value\n  ) {\n    console.warn(`You are trying to change the value prop of \"${name}\" but the Redux state for this element is already set.\n      React Props: \"${element.props.value}\"\n      Redux State: \"${formElementValue && formElementValue.value}\"\n\n      In this case, Redux is believed as the source of truth. See the docs if you are having issues changing the value of \"${name}\".\n      https://github.com/ikanedo/react-redux-simple-validate/blob/master/docs/faq.md#why-is-my-input-value-not-changing\n    `);\n  }\n\n  if (validate.isEmpty(name)) {\n    throw new Error(`${element.type} element is missing a name attribute!`, element);\n  }\n\n\n  const onChangeEvents = mergeCallbacks(onValueChange, onChange, getValidateEvents('onChange', formGroupProps));\n  const onFocusEvents = mergeCallbacks(onFocus, getLastFocusValue, getValidateEvents('onFocus', formGroupProps));\n  const onBlurEvents = mergeCallbacks(getValidateEvents('onBlur', formGroupProps));\n\n  return {\n    ...element.props,\n    key: name,\n    ref(node) {\n      stringRefs[getFormElementRefName(element)] = node;\n      stringRefs[`${getFormElementRefName(element)}-value`] = element.props.value;\n    },\n    onChange: onChangeEvents,\n    onFocus: onFocusEvents,\n    onBlur: (e) => {\n      if (onBlurProp) {\n        onBlurProp(e);\n      }\n\n      const hasTheValueChanged = formElementFromEvt(e).getVal() !== lastFocusValue;\n      if (hasTheValueChanged) {\n        onBlurEvents(e);\n      }\n    },\n    className: [\n      className,\n      getErrorInputClassName(name, errors),\n      getHasValueClassName(formElementValue)\n    ].join(' '),\n    ...formElementValue\n  };\n}\n\nfunction getElProps(element, args) {\n  if (isAFormEl(element)) {\n    return getFormElProps(element, args);\n  }\n\n  if (isAFormErrorElClass(element)) {\n    return getErrorClassElProps(element, args);\n  }\n\n  if (isAnErrorEl(element)) {\n    return getErrorElProps(element, args);\n  }\n\n  return element.props;\n}\n\nfunction getChildren(childrenProp, recurFormBuilder) {\n  if (isAReactEl(childrenProp)) {\n    return recurFormBuilder();\n  }\n\n  return childrenProp;\n}\n\nexport default function formBuilder(args) {\n  return React.Children.map(args.children, (element) => {\n    if (isLikeStringOrNum(element) || isAFormGroup(element)) {\n      return element;\n    }\n\n    const { children } = element.props;\n    const elementProps = getElProps(element, args);\n    const elementChildren = getChildren(\n      children,\n      formBuilder.bind(null, { ...args, children })\n    );\n\n    return [React.cloneElement(\n      element,\n      elementProps,\n      elementChildren\n    )];\n  });\n}\n"]}