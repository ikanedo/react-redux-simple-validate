{"version":3,"sources":["../../src/validators/validator.js"],"names":["getMessage","msg","transformToObject","prev","current","Object","assign","adaptRuleAndMsg","valRulesAndMsg","key","helpers","keys","rules","map","rule","messages","reduce","adaptConstraints","Validate","setConstraints","constraints","formData","errorMsgs"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,SAASA,UAAT,CAAoBC,GAApB,EAAyB;AACvB,MAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAC7B,WAAOA,GAAP;AACD;;AAED,MAAI,QAAOA,GAAP,yCAAOA,GAAP,OAAe,QAAnB,EAA6B;AAC3B,WAAOA,GAAP;AACD;;AAED,eAAWA,GAAX;AACD;;AAED,SAASC,iBAAT,CAA2BC,IAA3B,EAAiCC,OAAjC,EAA0C;AACxC,SAAOC,OAAOC,MAAP,CAAcH,IAAd,EAAoBC,OAApB,CAAP;AACD;;AAED,SAASG,eAAT,CAAyBC,cAAzB,EAAyCC,GAAzC,EAA8C;AAC5C,MAAMC,UAAU,CAACF,eAAeE,OAAf,IAA0B,EAA3B,EAA+BD,GAA/B,KAAuC,EAAvD;AACA,SAAOJ,OAAOM,IAAP,CAAYH,eAAeI,KAAf,CAAqBH,GAArB,CAAZ,EACJI,GADI,CACA;AAAA;;AAAA,+BACFC,IADE,sCAEAA,IAFA,EAEON,eAAeI,KAAf,CAAqBH,GAArB,EAA0BK,IAA1B,CAFP,qCAGQd,WAAWQ,eAAeO,QAAf,CAAwBN,GAAxB,EAA6BK,IAA7B,CAAX,CAHR,qCAIQJ,QAAQI,IAAR,KAAiB,IAJzB;AAAA,GADA,EAQJE,MARI,CAQGd,iBARH,EAQsB,EARtB,CAAP;AASD;;AAED,SAASe,gBAAT,CAA0BT,cAA1B,EAA0C;AACxC,SAAOH,OAAOM,IAAP,CAAYH,eAAeI,KAA3B,EACJC,GADI,CACA;AAAA,+BAAWJ,GAAX,EAAiBF,gBAAgBC,cAAhB,EAAgCC,GAAhC,CAAjB;AAAA,GADA,EAEJO,MAFI,CAEGd,iBAFH,EAEsB,EAFtB,CAAP;AAGD;;IAEoBgB,Q;AACnB,oBAAYV,cAAZ,EAA4B;AAAA;;AAC1B,SAAKW,cAAL,CAAoBX,cAApB;AACD;;;;mCAEcA,c,EAAgB;AAC7B,WAAKY,WAAL,GAAmBH,iBAAiBT,cAAjB,CAAnB;AACD;;;6BAEQa,Q,EAA0C;AAAA,UAAhCD,WAAgC,uEAAlB,KAAKA,WAAa;;AACjD,aAAO,wBAASC,QAAT,EAAmBD,WAAnB,KAAmC,EAA1C;AACD;;;2BAEMX,G,EAAKY,Q,EAA0C;AAAA,UAAhCD,WAAgC,uEAAlB,KAAKA,WAAa;;AACpD,UAAME,YAAY,wBAASD,QAAT,sBAAsBZ,GAAtB,EAA4BW,YAAYX,GAAZ,CAA5B,MAAmD,EAArE;AACA,aAAOa,UAAUb,GAAV,KAAkB,EAAzB;AACD;;;;;;kBAhBkBS,Q","file":"validator.js","sourcesContent":["import validate from 'validate.js';\nimport './adapters/required';\nimport './adapters/minlength';\nimport './adapters/maxlength';\nimport './adapters/pattern';\nimport './adapters/equalTo';\n\nfunction getMessage(msg) {\n  if (typeof msg === 'function') {\n    return msg;\n  }\n\n  if (typeof msg === 'object') {\n    return msg;\n  }\n\n  return `^${msg}`;\n}\n\nfunction transformToObject(prev, current) {\n  return Object.assign(prev, current);\n}\n\nfunction adaptRuleAndMsg(valRulesAndMsg, key) {\n  const helpers = (valRulesAndMsg.helpers || {})[key] || {};\n  return Object.keys(valRulesAndMsg.rules[key])\n    .map(rule => ({\n      [rule]: {\n        [rule]: valRulesAndMsg.rules[key][rule],\n        message: getMessage(valRulesAndMsg.messages[key][rule]),\n        helpers: helpers[rule] || null\n      }\n    }))\n    .reduce(transformToObject, {});\n}\n\nfunction adaptConstraints(valRulesAndMsg) {\n  return Object.keys(valRulesAndMsg.rules)\n    .map(key => ({ [key]: adaptRuleAndMsg(valRulesAndMsg, key) }))\n    .reduce(transformToObject, {});\n}\n\nexport default class Validate {\n  constructor(valRulesAndMsg) {\n    this.setConstraints(valRulesAndMsg);\n  }\n\n  setConstraints(valRulesAndMsg) {\n    this.constraints = adaptConstraints(valRulesAndMsg);\n  }\n\n  validate(formData, constraints = this.constraints) {\n    return validate(formData, constraints) || '';\n  }\n\n  single(key, formData, constraints = this.constraints) {\n    const errorMsgs = validate(formData, { [key]: constraints[key] }) || {};\n    return errorMsgs[key] || '';\n  }\n}\n"]}