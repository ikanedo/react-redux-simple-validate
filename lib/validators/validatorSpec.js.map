{"version":3,"sources":["../../src/validators/validatorSpec.js"],"names":["describe","formValidator","rulesAndMessageMock","constraints","beforeEach","rules","required","minlength","maxlength","messages","nestedMsg","undefined","it","expect","hasOwnProperty","toBe","reqMsg","message","toContain","helpers","setConstraints","get","toBeUndefined","toHaveMember","formDataValid","formDataInvalid","errorMessages","validate","errorMessagesWithConstraints","toBeEmptyString","toBeDefined","toBeNonEmptyObject","toHaveArrayOfStrings","customConstraint","single","toBeNonEmptyArray","toBeArrayOfStrings"],"mappings":"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","file":"validatorSpec.js","sourcesContent":["import Validator from './validator';\n\n/*\n  TODO: still need to create adapters for 'async' validation\n  This use case is to check whether an email is already registered\n*/\n\ndescribe('Validator', () => {\n  describe(\n    `An adapter which transforms the backend validation rules and message\n     to the validate.js contraints format`\n    , () => {\n      let formValidator;\n      let rulesAndMessageMock;\n      let constraints;\n\n      beforeEach(() => {\n        rulesAndMessageMock = {\n          rules: {\n            'gx-number': {\n              required: true,\n              minlength: 4,\n              maxlength: 50\n            },\n            'gx-pin': {\n              required: true,\n              minlength: 4\n            }\n          },\n          messages: {\n            'gx-number': {\n              required() {\n                return 'Please enter a valid giftcard number';\n              },\n              minlength: {\n                nestedMsg: 'Please show nested message' // for babel coverage\n              },\n              maxlength: undefined // for babel coverage\n            },\n            'gx-pin': {\n              required: 'Please enter a valid giftcard pin',\n              minlength: 'It has to be 4 characters long',\n            }\n          }\n        };\n      });\n\n      describe('Constructor', () => {\n        describe('Receives a rules and message JSON object and stores it for internal reuse', () => {\n          beforeEach(() => {\n            formValidator = new Validator(rulesAndMessageMock);\n            constraints = formValidator.constraints; // eslint-disable-line\n          });\n\n          it('SHOULD adapt JSON rules and message to a compatible validator.js constraints', () => {\n            expect(constraints.hasOwnProperty('gx-number')).toBe(true); // eslint-disable-line\n            expect(constraints.hasOwnProperty('gx-pin')).toBe(true); // eslint-disable-line\n            expect(constraints['gx-number'].hasOwnProperty('required')).toBe(true); // eslint-disable-line\n            expect(constraints['gx-number'].required.hasOwnProperty('message')).toBe(true); // eslint-disable-line\n\n            const reqMsg = rulesAndMessageMock.messages['gx-pin'].required;\n            expect(constraints['gx-pin'].required.message).toContain(reqMsg);\n          });\n\n          it('SHOULD return helpers as NULL', () => {\n            expect(constraints['gx-number'].required.helpers).toBe(null);\n          });\n        });\n      });\n\n      describe('setConstraints', () => {\n        beforeEach(() => {\n          formValidator = new Validator(rulesAndMessageMock);\n          formValidator.setConstraints({\n            rules: {\n              'gx-number': {\n                required: true\n              }\n            },\n            messages: {\n              'gx-number': {\n                required: 'Please enter a valid giftcard number'\n              }\n            },\n            helpers: {\n              'gx-number': {\n                required: {\n                  get() {}\n                }\n              }\n            }\n          });\n          constraints = formValidator.constraints; // eslint-disable-line\n        });\n\n        it('SHOULD replace the old constraint with the given constraints', () => {\n          expect(constraints['gx-pin']).toBeUndefined();\n        });\n\n        it('SHOULD return the given helpers', () => {\n          expect(constraints['gx-number'].required.helpers).toHaveMember('get');\n        });\n      });\n\n      describe('validate', () => {\n        describe('call this function to validate a set of values', () => {\n          let formDataValid;\n          let formDataInvalid;\n\n          beforeEach(() => {\n            formDataValid = {\n              'gx-number': '123456789',\n              'gx-pin': '1234'\n            };\n          });\n\n          beforeEach(() => {\n            formDataInvalid = {\n              'gx-number': '',\n              'gx-pin': ''\n            };\n          });\n\n          it('SHOULD return empty string messages when data is valid', () => {\n            const errorMessages = formValidator.validate(formDataValid);\n            const errorMessagesWithConstraints = formValidator.validate(formDataValid, constraints);\n            expect(errorMessages).toBeEmptyString();\n            expect(errorMessagesWithConstraints).toBeEmptyString();\n          });\n\n          it('SHOULD return error messages when data is invalid', () => {\n            const errorMessages = formValidator.validate(formDataInvalid);\n            const errorMessagesWithConstraints = formValidator.validate(formDataInvalid, constraints);\n\n            expect(errorMessages).toBeDefined();\n            expect(errorMessages).toBeNonEmptyObject();\n            expect(errorMessages).toHaveArrayOfStrings('gx-number');\n\n            expect(errorMessagesWithConstraints).toBeDefined();\n            expect(errorMessagesWithConstraints).toBeNonEmptyObject();\n            expect(errorMessagesWithConstraints).toHaveArrayOfStrings('gx-number');\n          });\n        });\n      });\n\n      describe('single', () => {\n        describe('call this function to validate a single value', () => {\n          let customConstraint;\n\n          beforeEach(() => {\n            customConstraint = {\n              'gx-number': {\n                minlength: {\n                  minlength: 10,\n                  message: '^wrong'\n                }\n              }\n            };\n          });\n\n          it('SHOULD return empty string messages when data is valid', () => {\n            const errorMessages = formValidator.single('gx-number', {\n              'gx-number': 'value'\n            });\n            expect(errorMessages).toBeEmptyString();\n          });\n\n          it('SHOULD return error messages when data is invalid', () => {\n            const errorMessages = formValidator.single('gx-number', {\n              'gx-number': null\n            });\n            expect(errorMessages).toBeDefined();\n            expect(errorMessages).toBeNonEmptyArray();\n            expect(errorMessages).toBeArrayOfStrings('gx-number');\n          });\n\n          it('SHOULD use passed custom constraints', () => {\n            const errorMessages = formValidator.single('gx-number', {\n              'gx-number': 'value'\n            }, customConstraint);\n            expect(errorMessages).toBeDefined();\n            expect(errorMessages).toBeNonEmptyArray();\n            expect(errorMessages).toBeArrayOfStrings('gx-number');\n            expect(errorMessages).toContain('wrong');\n          });\n        });\n      });\n    }\n  );\n});\n"]}