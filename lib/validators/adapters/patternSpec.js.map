{"version":3,"sources":["../../../src/validators/adapters/patternSpec.js"],"names":["describe","constraints","beforeEach","pattern","message","it","hasErrorMsg","single","expect","toBeDefined","toBeArrayOfStrings","toContain","toBeUndefined"],"mappings":";;AAAA;;;;AACA;;;;AAEAA,SAAS,6BAAT,EAAwC,YAAM;AAC5C,MAAIC,oBAAJ;;AAEAC,aAAW,YAAM;AACfD,kBAAc;AACZE,eAAS;AACPA,iBAAS,uDADF;AAEPC,iBAAS;AAFF;AADG,KAAd;AAMD,GAPD;;AASAC,KAAG,yDAAH,EAA8D,YAAM;AAClE,QAAMC,cAAc,mBAASC,MAAT,CAAgB,KAAhB,EAAuBN,WAAvB,CAApB;AACAO,WAAOF,WAAP,EAAoBG,WAApB;AACAD,WAAOF,WAAP,EAAoBI,kBAApB;AACAF,WAAOF,WAAP,EAAoBK,SAApB,CAA8B,wBAA9B;AACD,GALD;;AAOAN,KAAG,wDAAH,EAA6D,YAAM;AACjE,QAAMC,cAAc,mBAASC,MAAT,CAAgB,cAAhB,EAAgCN,WAAhC,CAApB;AACAO,WAAOF,WAAP,EAAoBM,aAApB;AACD,GAHD;AAID,CAvBD","file":"patternSpec.js","sourcesContent":["import validate from 'validate.js';\nimport './pattern';\n\ndescribe('Validator Adapter - pattern', () => {\n  let constraints;\n\n  beforeEach(() => {\n    constraints = {\n      pattern: {\n        pattern: \"^[A-Za-z0-9._'%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}$|^$\",\n        message: '^does not match pattern'\n      }\n    };\n  });\n\n  it('SHOULD return error message WHEN pattern does not match', () => {\n    const hasErrorMsg = validate.single('123', constraints);\n    expect(hasErrorMsg).toBeDefined();\n    expect(hasErrorMsg).toBeArrayOfStrings();\n    expect(hasErrorMsg).toContain('does not match pattern');\n  });\n\n  it('SHOULD return undefined WHEN value matches the pattern', () => {\n    const hasErrorMsg = validate.single('kb@gmail.com', constraints);\n    expect(hasErrorMsg).toBeUndefined();\n  });\n});\n"]}