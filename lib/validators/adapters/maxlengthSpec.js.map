{"version":3,"sources":["../../../src/validators/adapters/maxlengthSpec.js"],"names":["describe","constraints","beforeEach","maxlength","message","it","hasErrorMsg","validate","single","expect","toBeDefined","toBeArrayOfStrings","toContain","toBeUndefined"],"mappings":";;AAAA;;;;AACA;;;;AAEAA,SAAS,+BAAT,EAA0C,YAAM;AAC9C,MAAIC,oBAAJ;;AAEAC,aAAW,YAAM;AACfD,kBAAc;AACZE,iBAAW;AACTA,mBAAW,CADF;AAETC,iBAAS;AAFA;AADC,KAAd;AAMD,GAPD;;AASAC,KAAG,kEAAH,EAAuE,YAAM;AAC3E,QAAMC,cAAcC,mBAASC,MAAT,CAAgB,OAAhB,EAAyBP,WAAzB,CAApB;AACAQ,WAAOH,WAAP,EAAoBI,WAApB;AACAD,WAAOH,WAAP,EAAoBK,kBAApB;AACAF,WAAOH,WAAP,EAAoBM,SAApB,CAA8B,sBAA9B;AACD,GALD;;AAOAP,KAAG,4DAAH,EAAiE,YAAM;AACrE,QAAMC,cAAcC,mBAASC,MAAT,CAAgB,MAAhB,EAAwBP,WAAxB,CAApB;AACAQ,WAAOH,WAAP,EAAoBO,aAApB;AACD,GAHD;AAID,CAvBD","file":"maxlengthSpec.js","sourcesContent":["import validate from 'validate.js';\nimport './maxlength';\n\ndescribe('Validator Adapter - maxlength', () => {\n  let constraints;\n\n  beforeEach(() => {\n    constraints = {\n      maxlength: {\n        maxlength: 4,\n        message: '^3 characters or less'\n      }\n    };\n  });\n\n  it('SHOULD return error message WHEN value is more than 4 characters', () => {\n    const hasErrorMsg = validate.single('12345', constraints);\n    expect(hasErrorMsg).toBeDefined();\n    expect(hasErrorMsg).toBeArrayOfStrings();\n    expect(hasErrorMsg).toContain('3 characters or less');\n  });\n\n  it('SHOULD return undefined WHEN value is 4 characters or less', () => {\n    const hasErrorMsg = validate.single('1234', constraints);\n    expect(hasErrorMsg).toBeUndefined();\n  });\n});\n"]}