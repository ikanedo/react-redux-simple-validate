{"version":3,"sources":["../../../src/validators/adapters/equalToSpec.js"],"names":["describe","constraints","beforeEach","confirmPassword","equalTo","message","it","hasErrorMsg","password","expect","toBeDefined","toBeArrayOfStrings","toContain","toBeUndefined"],"mappings":";;AAAA;;;;AACA;;;;AAEAA,SAAS,6BAAT,EAAwC,YAAM;AAC5C,MAAIC,oBAAJ;;AAEAC,aAAW,YAAM;AACfD,kBAAc;AACZE,uBAAiB;AACfC,iBAAS;AACPA,mBAAS,iBADF;AAEPC,mBAAS;AAFF;AADM;AADL,KAAd;AAQD,GATD;;AAWAC,KAAG,8DAAH,EAAmE,YAAM;AACvE,QAAMC,cAAc,wBAAS;AAC3BC,gBAAU,OADiB;AAE3BL,uBAAiB;AAFU,KAAT,EAGjBF,WAHiB,CAApB;AAIAQ,WAAOF,WAAP,EAAoBG,WAApB;AACAD,WAAOF,YAAYJ,eAAnB,EAAoCQ,kBAApC;AACAF,WAAOF,YAAYJ,eAAnB,EAAoCS,SAApC,CAA8C,yBAA9C;AACD,GARD;;AAUAN,KAAG,4DAAH,EAAiE,YAAM;AACrE,QAAMC,cAAc,wBAAS;AAC3BC,gBAAU,OADiB;AAE3BL,uBAAiB;AAFU,KAAT,EAGjBF,WAHiB,CAApB;AAIAQ,WAAOF,WAAP,EAAoBM,aAApB;AACD,GAND;AAOD,CA/BD","file":"equalToSpec.js","sourcesContent":["import validate from 'validate.js';\nimport './equalTo';\n\ndescribe('Validator Adapter - equalTo', () => {\n  let constraints;\n\n  beforeEach(() => {\n    constraints = {\n      confirmPassword: {\n        equalTo: {\n          equalTo: '[name=password]',\n          message: '^password does not match'\n        }\n      }\n    };\n  });\n\n  it('SHOULD return error WHEN value does not match with attribute', () => {\n    const hasErrorMsg = validate({\n      password: 'match',\n      confirmPassword: 'doesNotMatch'\n    }, constraints);\n    expect(hasErrorMsg).toBeDefined();\n    expect(hasErrorMsg.confirmPassword).toBeArrayOfStrings();\n    expect(hasErrorMsg.confirmPassword).toContain('password does not match');\n  });\n\n  it('SHOULD return undefined WHEN value matches given attribute', () => {\n    const hasErrorMsg = validate({\n      password: 'match',\n      confirmPassword: 'match'\n    }, constraints);\n    expect(hasErrorMsg).toBeUndefined();\n  });\n});\n"]}